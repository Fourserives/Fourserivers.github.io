<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>unity开发日记（四）</title>
      <link href="/2023/07/26/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/07/26/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity开发日记（四）"><a href="#Unity开发日记（四）" class="headerlink" title="Unity开发日记（四）"></a>Unity开发日记（四）</h1><h2 id="人物属性及伤害计算"><a href="#人物属性及伤害计算" class="headerlink" title="人物属性及伤害计算"></a>人物属性及伤害计算</h2><p>选择怪物素材</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726160152682-1690358691607-4.png" alt="image-20230726160152682"></p><p>对怪物素材处理后进行切割：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726160419010-1690358715948-7.png" alt="image-20230726160419010"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726160230023.png" alt="image-20230726160230023"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726160703067.png" alt="image-20230726160703067"></p><p>将野猪素材拖拽到<code>Hierarchy</code>界面上成为一个对象：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726161201886.png" alt="image-20230726161201886"></p><p>然后为野猪对象添加组件以及进行其他设置的修改：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726161230195.png" alt="image-20230726161230195"></p><ul><li>2D物体组件：</li></ul><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726161336789.png" alt="image-20230726161336789"></p><ul><li>2D碰撞体组件：</li></ul><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726161631112.png" alt="image-20230726161631112"></p><p>设置好碰撞体体积后出现的问题有：当人物经过或碰到野猪对象会推着他走，相当于撞上了实体，而实际游戏需要是要穿过模型的，也就是两个模型之间可以穿过而不是发生碰撞</p><p>如何解决？</p><h3 id="解决不同模型碰撞问题-穿过模型"><a href="#解决不同模型碰撞问题-穿过模型" class="headerlink" title="解决不同模型碰撞问题(穿过模型)"></a>解决不同模型碰撞问题(穿过模型)</h3><p>首先先要创建两个不同的图层</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726162049124.png" alt="image-20230726162049124"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726162116398.png" alt="image-20230726162116398"></p><p>为不同角色绑定不同的<code>Layer</code>:</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726162211864.png" alt="image-20230726162211864"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726162230148.png" alt="image-20230726162230148"></p><p>接下来在野猪对象的2D碰撞体积组件(<strong>Box Collider 2D</strong>)上增加剔除不同图层的内容：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726162422628.png" alt="image-20230726162422628"></p><p>这样就完成了不同模型之间的剔除，可以相互穿过的效果</p><h3 id="通过触发器实现伤害效果"><a href="#通过触发器实现伤害效果" class="headerlink" title="通过触发器实现伤害效果"></a>通过触发器实现伤害效果</h3><p>虽然实现了模型之间可以相互穿过的效果，但是在游戏中，要让角色如果穿过怪物的话会被造成伤害，所以要使用触发器来实现我们要的效果</p><p>首先再给野猪对象添加一个胶囊类型的碰撞体组件：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726163239368.png" alt="image-20230726163239368"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726163325643.png" alt="image-20230726163325643"></p><p>触发器脚本内容（测试）：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726211547249.png" alt="image-20230726211547249"></p><h3 id="创建人物属性-生命、无敌帧等"><a href="#创建人物属性-生命、无敌帧等" class="headerlink" title="创建人物属性(生命、无敌帧等)"></a>创建人物属性(生命、无敌帧等)</h3><h4 id="对象基本属性"><a href="#对象基本属性" class="headerlink" title="对象基本属性"></a>对象基本属性</h4><p>在<code>Scripts</code>下创建一个General文件，用于存储涉及人物计算内容的脚本：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726212005510.png" alt="image-20230726212005510"></p><p>可以将物理监测脚本拖到里边，创建新的用于创建人物属性的脚本<code>Character</code></p><p>然后将代码作为组件挂载到角色和怪物身上：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726212159946.png" alt="image-20230726212159946"></p><p>定义人物属性内容表格：</p><table><thead><tr><th>人物属性</th><th>值类型</th></tr></thead><tbody><tr><td>最大血量</td><td>maxHealth</td></tr><tr><td>当前血量</td><td>currentHealth</td></tr><tr><td></td><td></td></tr></tbody></table><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727103242277.png" alt="image-20230727103242277"></p><h4 id="对象攻击伤害"><a href="#对象攻击伤害" class="headerlink" title="对象攻击伤害"></a>对象攻击伤害</h4><p>在<code>General</code>文件下再创建一个人物攻击属性的脚本<code>Attack</code></p><p>然后将代码作为组件挂载到角色和怪物身上：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230726215325495.png" alt="image-20230726215325495"></p><p>定义人物属性内容表格：</p><table><thead><tr><th>攻击属性</th><th>值类型</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>在<code>Character</code>脚本下定义一个受到攻击减少血量的方法：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727103447232.png" alt="image-20230727103447232"></p><p>在<code>Attack</code>脚本下定义用于调用受到伤害进行减少的方法，由于是当角色和怪物进行<strong>接触</strong>时受到伤害，所以直接用<code>OnTriggerStay2D</code>这个已经封装好的方法即可：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727103320281.png" alt="image-20230727103320281"></p><p>编辑受到伤害的逻辑：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727105056504.png" alt="image-20230727105056504"></p><h5 id="设置无敌帧"><a href="#设置无敌帧" class="headerlink" title="设置无敌帧"></a>设置无敌帧</h5><p>由于没有设置无敌时间，所以当人物经过怪物时相当于一次性受到很多次伤害，所以我们要通过设置无敌帧来保证人物不会在碰到怪物的一瞬间丢失大量血量：</p><p>首先定义我们需要的无敌属性数值内容表格</p><table><thead><tr><th>无敌属性</th><th>值类型</th></tr></thead><tbody><tr><td>无敌时间</td><td>invulnerableDucation</td></tr><tr><td>计时器</td><td>invulnerableCounter</td></tr><tr><td>状态</td><td>invulnerable</td></tr></tbody></table><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727170630799.png" alt="image-20230727170630799"></p><p>定义逻辑：</p><p>1、定义状态更改(即受到一次伤害后就切换此时状态为无敌)</p><p>目的：保证受到伤害在一定时间内不会连续</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727171024371.png" alt="image-20230727171024371"></p><p>2、在攻击造成后即刻调用状态更改方法，同时赋值给计时器</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727171217165.png" alt="image-20230727171217165"></p><p>3、对计时器进行计时，使其在无敌时间后再次切回正常状态</p><p>该逻辑要在生命周期内进行，让计时器每一帧都进行计算</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727171300825.png" alt="image-20230727171300825"></p><p><code>Time.deltaTime</code>概述：完成上一帧所用的时间</p><p>最后进行细节修正：</p><p><code>Attack</code>下</p><p><img src="/./../../../typora-images/image-20230727171750740.png" alt="image-20230727171750740"></p><p><code>Character</code>下</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230727171917366.png" alt="image-20230727171917366"></p><h2 id="受伤和死亡的逻辑和动画"><a href="#受伤和死亡的逻辑和动画" class="headerlink" title="受伤和死亡的逻辑和动画"></a>受伤和死亡的逻辑和动画</h2><p>死亡动画应该临界于其他所有动画之上！</p><h3 id="受伤和死亡动画"><a href="#受伤和死亡动画" class="headerlink" title="受伤和死亡动画"></a>受伤和死亡动画</h3><ul><li>受伤动画</li></ul><p><img src="/./../images/unity(%E5%9B%9B)/image-20230728143528831.png" alt="image-20230728143528831"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230728143634190.png" alt="image-20230728143634190"></p><ul><li>死亡动画</li></ul><p><img src="/./../images/unity(%E5%9B%9B)/image-20230728143815226.png" alt="image-20230728143815226"></p><h3 id="受伤部分"><a href="#受伤部分" class="headerlink" title="受伤部分"></a>受伤部分</h3><h4 id="实现闪烁效果"><a href="#实现闪烁效果" class="headerlink" title="实现闪烁效果"></a>实现闪烁效果</h4><p>新建图画图层：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230728175851676.png" alt="image-20230728175851676"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230728175920867.png" alt="image-20230728175920867"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730113458522.png" alt="image-20230730113458522"></p><p>新建动画：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230729114327234.png" alt="image-20230729114327234"></p><p><strong>通过<code>Add Property</code>可以修改不同组件的参数，从而实现在一个时间轴上不同组件参数发生变化从而达到不同效果</strong></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230729115020970.png" alt="image-20230729115020970"></p><p>可以通过角色的<code>Sprite Renderer</code>(材质)更改颜色来实现闪烁效果：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230729115630045.png" alt="image-20230729115630045"></p><p>回到动画界面点击Add Property添加我们需要更改的组件，同时选择我们要更改的组件里边的值：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230729120058423.png" alt="image-20230729120058423"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230729120317586.png" alt="image-20230729120317586"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230729120345687.png" alt="image-20230729120345687"></p><p>将动画添加到叠加图层(Hurt Layer)并创建切换的条件：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730105020022.png" alt="image-20230730105020022"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730105136134.png" alt="image-20230730105136134"></p><p>Setting跟前边的动画一样设置为无勾选状态，其他数值都为0即可</p><p>再设置一个返回连线，当动画播放完毕后返回原始动画：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730105330911.png" alt="image-20230730105330911"></p><h5 id="▲事件方法-UnityEvent-使用方法"><a href="#▲事件方法-UnityEvent-使用方法" class="headerlink" title="▲事件方法(UnityEvent 使用方法)"></a>▲事件方法(UnityEvent 使用方法)</h5><p>在<code>PlayerAnimation</code>动画控制脚本中定义动画切换的方法，只有角色被怪物打到(受到伤害时)才会让<code>hurt</code>值被勾选，从而进行<strong>闪烁效果的播放</strong>：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730105831235.png" alt="image-20230730105831235"></p><p><code>Character</code>角色属性脚本受伤部分定义逻辑：</p><ul><li>导入事件包，通过事件类来快速编辑条件</li></ul><p><strong>目的：可以在unity的UI界面上很快添加我们需要的条件</strong></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730110437329.png" alt="image-20230730110437329"></p><p>当在脚本中创建完成后返回unity即可看到：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730110842721.png" alt="image-20230730110842721"></p><ul><li>将我们需要的条件添加进去(将条件注册进事件中)</li></ul><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730111137659.png" alt="image-20230730111137659"></p><p>这是要更改的对象，也就是<strong>条件触发的对象(Player)<strong>，然后选择Function，也就是我们要</strong>触发的组件的方法</strong></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730111342721.png" alt="image-20230730111342721"></p><ul><li>启动事件</li></ul><p>直接调用Invoke方法即可</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730111857591.png" alt="image-20230730111857591"></p><h4 id="受伤后有反弹效果"><a href="#受伤后有反弹效果" class="headerlink" title="受伤后有反弹效果"></a>受伤后有反弹效果</h4><p>在<code>PlayerController</code>编写反弹逻辑：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730115708885.png" alt="image-20230730115708885"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730115849249.png" alt="image-20230730115849249"></p><p>细节修改：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730120013477.png" alt="image-20230730120013477"></p><p>实现当受伤时不能移动</p><p>在事件中注册条件：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730131525691.png" alt="image-20230730131525691"></p><p>这样就完成了反弹效果，但是还会有新的问题——即人物反弹距离后会一直倒退且此时无法移动，如何解决：</p><h5 id="动画过程执行代码-Animator-Behavior-代码的使用方法"><a href="#动画过程执行代码-Animator-Behavior-代码的使用方法" class="headerlink" title="动画过程执行代码(Animator Behavior 代码的使用方法)"></a>动画过程执行代码(Animator Behavior 代码的使用方法)</h5><p><strong>在动画执行过程中进行代码的变化，通过</strong><code>Animator Behavior</code>来进行实现</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730133104530.png" alt="image-20230730133104530"></p><p>创建一个新的Behaviour</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730133155292.png" alt="image-20230730133155292"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730133316667.png" alt="image-20230730133316667"></p><p>在脚本中编辑新逻辑：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730133914793.png" alt="image-20230730133914793"></p><p>这样就完成了反弹效果的最终实现</p><h3 id="死亡部分"><a href="#死亡部分" class="headerlink" title="死亡部分"></a>死亡部分</h3><p>在动画控制器中的叠加图层添加动画，同时创建一个新的判断值<code>isDead</code></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730140558570.png" alt="image-20230730140558570"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730140723952.png" alt="image-20230730140723952"></p><p>创建连线并添加条件：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730141006077.png" alt="image-20230730141006077"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730141022745.png" alt="image-20230730141022745"></p><p>连接退出的条件：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730141124749.png" alt="image-20230730141124749"></p><p>在<code>Character</code>角色属性脚本中添加死亡逻辑：</p><p>先创建对应的死亡事件，这样可以在unityUI界面上直接添加条件</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730141558463.png" alt="image-20230730141558463"></p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730141614824.png" alt="image-20230730141614824"></p><h4 id="死亡后不能操作"><a href="#死亡后不能操作" class="headerlink" title="死亡后不能操作"></a>死亡后不能操作</h4><p>在<code>PlayerController</code>角色控制脚本中添加新的死亡逻辑，实现死亡后不允许操作的逻辑：</p><p>创建isDead布尔类型变量，创建死亡对应的方法来关闭玩家操作内容</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730142014143.png" alt="image-20230730142014143"></p><p>在<code>PlayerAnimation</code>动画控制脚本中添加对应的获取死亡条件(isDead)值的方法：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730142215642.png" alt="image-20230730142215642"></p><p>最后将要进行的组件的方法作为条件注册到事件上：</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730142651164.png" alt="image-20230730142651164"></p><p>这样就完成了死亡事件的绑定与动画的播放，但还有一个问题——即人物死亡动画会一直播放，该如何解决：</p><p>在动画控制器中<strong>取消循环播放的勾选</strong>即可</p><p><img src="/./../images/unity(%E5%9B%9B)/image-20230730143102875.png" alt="image-20230730143102875"></p><p>这样就完成了整个死亡过程的功能实现</p><p>最终的脚本代码：</p><p>角色控制脚本<code>PlayerController</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> PlayerInputControls inputControl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Vector2 inputDirection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PhysicsCheck physicsCheck;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CapsuleCollider2D coll;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;基本参数&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speed;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//跑步速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> runSpeed;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//行走速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> walkSpeed =&gt; runSpeed / <span class="number">2.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳跃的力</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> jumpForce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否下蹲</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isCrouch;</span><br><span class="line">    <span class="comment">//碰撞体的两个变量(大小和位移)</span></span><br><span class="line">    <span class="keyword">private</span> Vector2 originalOffset;</span><br><span class="line">    <span class="keyword">private</span> Vector2 originalSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isHurt;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isDead;</span><br><span class="line">    <span class="comment">//反弹力</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hurtForce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Awake 相当于生命周期</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line"></span><br><span class="line">        physicsCheck = GetComponent&lt;PhysicsCheck&gt;();</span><br><span class="line"></span><br><span class="line">        coll= GetComponent&lt;CapsuleCollider2D&gt;();</span><br><span class="line">        originalOffset = coll.offset;</span><br><span class="line">        originalSize = coll.size;</span><br><span class="line"></span><br><span class="line">        inputControl = <span class="keyword">new</span> PlayerInputControls();</span><br><span class="line"></span><br><span class="line">        inputControl.GamePlay.Jump.started += Jump;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 强制走路</span></span><br><span class="line">        runSpeed = speed;</span><br><span class="line">        inputControl.GamePlay.WalkButtom.performed += ctx =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (physicsCheck.isGround)</span><br><span class="line">            &#123;</span><br><span class="line">                speed = walkSpeed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        inputControl.GamePlay.WalkButtom.canceled += ctx =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (physicsCheck.isGround)</span><br><span class="line">            &#123;</span><br><span class="line">                speed = runSpeed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//物品被调用时则开始启用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputControl.Enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//物品被关闭时关闭启用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputControl.Disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//周期性的每帧执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputDirection = inputControl.GamePlay.Move.ReadValue&lt;Vector2&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FixedUpdate是一个固定更新的值</span></span><br><span class="line">    <span class="comment">//周期性的固定执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isHurt)</span><br><span class="line">            Move();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity = <span class="keyword">new</span> Vector2(inputDirection.x * speed * Time.deltaTime, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> faceDir = (<span class="built_in">int</span>)transform.localScale.x;</span><br><span class="line">        <span class="comment">//通过判断语句来确定当控制人物向左或者向右时进行翻转</span></span><br><span class="line">        <span class="comment">//向右是大于0，向左是小于0</span></span><br><span class="line">        <span class="keyword">if</span> (inputDirection.x &gt; <span class="number">0</span>)</span><br><span class="line">            faceDir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(inputDirection.x &lt; <span class="number">0</span>)</span><br><span class="line">            faceDir = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//人物翻转</span></span><br><span class="line">        transform.localScale = <span class="keyword">new</span> Vector3(faceDir, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下蹲</span></span><br><span class="line">        isCrouch = inputDirection.y &lt; <span class="number">-0.5f</span> &amp;&amp; physicsCheck.isGround;</span><br><span class="line">        <span class="keyword">if</span> (isCrouch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//修改碰撞体位移和大小</span></span><br><span class="line">            coll.offset = <span class="keyword">new</span> Vector2(<span class="number">-0.05f</span>, <span class="number">0.85f</span>);</span><br><span class="line">            coll.size = <span class="keyword">new</span> Vector2(<span class="number">0.7f</span>, <span class="number">1.7f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//还原碰撞体的参数</span></span><br><span class="line">            coll.offset = originalOffset;</span><br><span class="line">            coll.size = originalSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="comment">//private void OnTriggerStay2D(Collider2D other)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    Debug.Log(other.name);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params">InputAction.CallbackContext obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Debug.Log(&quot;Jump&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(physicsCheck.isGround)</span><br><span class="line">            rb.AddForce(transform.up * jumpForce, ForceMode2D.Impulse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//角色受伤对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GerHurt</span>(<span class="params">Transform attacker</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        isHurt = <span class="literal">true</span>;</span><br><span class="line">        rb.velocity = Vector2.zero;</span><br><span class="line">        Vector2 dir = <span class="keyword">new</span> Vector2((transform.position.x - attacker.position.x), <span class="number">0</span>).normalized;</span><br><span class="line"></span><br><span class="line">        rb.AddForce(dir * hurtForce, ForceMode2D.Impulse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//角色死亡对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerDead</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        isDead = <span class="literal">true</span>;</span><br><span class="line">        inputControl.GamePlay.Disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>角色(对象)属性脚本<code>Character</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Character</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;基本属性&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> maxHealth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> currentHealth;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;受伤无敌&quot;</span>)</span>]</span><br><span class="line">    <span class="comment">//无敌时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> invulnerableDucation;</span><br><span class="line">    <span class="comment">//计时器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> invulnerableCounter;</span><br><span class="line">    <span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> invulnerable;</span><br><span class="line">    <span class="comment">//受伤事件</span></span><br><span class="line">    <span class="keyword">public</span> UnityEvent&lt;Transform&gt; OnTakeDamage;</span><br><span class="line">    <span class="comment">//死亡事件</span></span><br><span class="line">    <span class="keyword">public</span> UnityEvent OnDie;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化血量(开头血量为满血)</span></span><br><span class="line">        currentHealth = maxHealth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (invulnerable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//更新计时器</span></span><br><span class="line">            invulnerableCounter -= Time.deltaTime;</span><br><span class="line">            <span class="keyword">if</span> (invulnerableCounter &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//更新状态</span></span><br><span class="line">                invulnerable = <span class="literal">false</span>;   </span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被攻击方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TakeDamage</span>(<span class="params">Attack attacker</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (invulnerable)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//Debug.Log(attacker.damage);</span></span><br><span class="line">        <span class="keyword">if</span>(currentHealth - attacker.damage &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            currentHealth -= attacker.damage;</span><br><span class="line">            TriggerInvulnerable();</span><br><span class="line">            <span class="comment">//触发受伤</span></span><br><span class="line">            OnTakeDamage?.Invoke(attacker.transform);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            currentHealth = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//触发死亡动画</span></span><br><span class="line">            OnDie?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TriggerInvulnerable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!invulnerable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//更新状态</span></span><br><span class="line">            invulnerable = <span class="literal">true</span>;</span><br><span class="line">            invulnerableCounter = invulnerableDucation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>角色(对象)攻击属性脚本<code>Attack</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Attack</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> attackRange;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> attackRate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerStay2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        other.GetComponent&lt;Character&gt;()?.TakeDamage(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>角色动画控制方法<code>PlayerAnimation</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerAnimation</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注册的是动画控制器——Animator</span></span><br><span class="line">    <span class="keyword">private</span> Animator anim;</span><br><span class="line">    <span class="keyword">private</span> Rigidbody2D rb;</span><br><span class="line">    <span class="keyword">private</span> PhysicsCheck physicsCheck;</span><br><span class="line">    <span class="keyword">private</span> PlayerController playerController;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        anim = GetComponent&lt;Animator&gt;();</span><br><span class="line">        rb = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">        physicsCheck= GetComponent&lt;PhysicsCheck&gt;();</span><br><span class="line">        playerController= GetComponent&lt;PlayerController&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetAnimation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//管理所有动画</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetAnimation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        anim.SetFloat(<span class="string">&quot;velocityX&quot;</span>, Mathf.Abs(rb.velocity.x));</span><br><span class="line">        anim.SetFloat(<span class="string">&quot;velocityY&quot;</span>,rb.velocity.y);</span><br><span class="line">        anim.SetBool(<span class="string">&quot;isGround&quot;</span>, physicsCheck.isGround);</span><br><span class="line">        anim.SetBool(<span class="string">&quot;isCrouch&quot;</span>, playerController.isCrouch);</span><br><span class="line">        anim.SetBool(<span class="string">&quot;isDead&quot;</span>, playerController.isDead);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayHurt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        anim.SetTrigger(<span class="string">&quot;hurt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>unity开发日记（三）</title>
      <link href="/2023/07/23/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/07/23/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity开发日记（三）"><a href="#Unity开发日记（三）" class="headerlink" title="Unity开发日记（三）"></a>Unity开发日记（三）</h1><h2 id="物理环境监测"><a href="#物理环境监测" class="headerlink" title="物理环境监测"></a>物理环境监测</h2><p>为角色新建物理监测脚本：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724144429242.png" alt="image-20230724144429242"></p><p>将脚本作为组件添加到Player上边</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724144544646.png" alt="image-20230724144544646"></p><p>开始编写脚本内容来实现物理环境监测</p><p>1、采用<code>Physics2D.OverlapCirle</code>函数来实现对地面的检测（即角色是否站在地面上）</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724150614684.png" alt="image-20230724150614684"></p><p>其他参数作用(参考unity帮助文档)：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724150329357.png" alt="image-20230724150329357"></p><p>角色坐标位置原点：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724150734119.png" alt="image-20230724150734119"></p><p>如果角色是在地面上，也就是此时的OverlapCircle函数返回为<code>true</code>，赋值给isGround：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724151028928.png" alt="image-20230724151028928"></p><p><strong><code>groundLayer</code>字段的作用：</strong></p><p>如果同地面上（不同图层）有不同的内容，诸如草坪，花朵，蘑菇等等物品，此时同处于地面，但实际我们要检测的是地面，这时候就要通过指定图层（地面所在图层）来保证准确度</p><p>2、为地面图层添加指定的<code>Layer</code></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724151544307.png" alt="image-20230724151544307"></p><p>随后返回Player，为Player绑定字段（<strong>checkRedius，GroundLayer</strong>）需要的内容：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724151737704.png" alt="image-20230724151737704"></p><p>最后进行测试，运行后看角色落地时<code>Is Ground</code>会不会自动打勾(true)</p><p>3、两个脚本进行交互，修改代码使得只有在地面上人物才能跳跃</p><p>在<code>Player Controller</code>脚本获得<code>Physics Check</code>组件并实现代码的修改：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724152639393.png" alt="image-20230724152639393"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724152708180.png" alt="image-20230724152708180"></p><h3 id="提高物理环境检测度"><a href="#提高物理环境检测度" class="headerlink" title="提高物理环境检测度"></a>提高物理环境检测度</h3><p>希望通过设置一个可以移动的球形来提高检测的精确度</p><p>在<code>PhysicsCheck</code>脚本中编写一个数组作为脚底位移差值（类型为Vector2，也就是坐标）：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724153317363.png" alt="image-20230724153317363"></p><p>如何把位置绘制出来？</p><p>可以通过<code>OnDrawGizmosSelected()</code>来编写对应的内容，从而实现在我们的人物检测点上绘制出可以偏移的圆：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724154852398.png" alt="image-20230724154852398"></p><p>Gizmos → <img src="/./../../../typora-images/image-20230724154924999.png" alt="image-20230724154924999"></p><p>最终呈现效果为：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724155117790.png" alt="image-20230724155117790"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724155225067.png" alt="image-20230724155225067"></p><h3 id="为人物物理设置光滑材质"><a href="#为人物物理设置光滑材质" class="headerlink" title="为人物物理设置光滑材质"></a>为人物物理设置光滑材质</h3><p>目的：让人物不会黏在墙上</p><p>在Setting文件夹下边创建Physics Material文件夹，然后创建一个新的物理材质</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724155853805.png" alt="image-20230724155853805"></p><p>将材质的摩擦力设置为0，然后为其添加到角色的<code>Capsule Collider 2D</code>上：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724155953343.png" alt="image-20230724155953343"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230724160045644.png" alt="image-20230724160045644"></p><h2 id="人物动画"><a href="#人物动画" class="headerlink" title="人物动画"></a>人物动画</h2><h3 id="创建动画控制器-Animator"><a href="#创建动画控制器-Animator" class="headerlink" title="创建动画控制器(Animator)"></a>创建动画控制器(Animator)</h3><p>定位我们需要的动画素材，对动画素材进行切割(前边已经完成好)</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725144257817.png" alt="image-20230725144257817"></p><p>为角色添加<code>Animator</code>组件（<strong>动画控制器</strong>）</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725144627362.png" alt="image-20230725144627362"></p><p>可以看出还需要添加控制器，所以下一步是创建动画控制器：</p><p>在Assets文件夹下创建Animations文件夹，用于存放接下来需要的各个角色对象的动画控制器，然后创建对应需要的角色文件夹</p><p>在文件夹下再创建<code>Animator Controller</code></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725145027557.png" alt="image-20230725145027557"></p><p>然后将该动画控制器添加到<code>Animator</code>组件中的Controller进行绑定：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725145125736.png" alt="image-20230725145125736"></p><p>如何查看角色的动画控制器？</p><p>选中角色后，在Window界面上点击Animator进入动画控制器界面</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725145342160.png" alt="image-20230725145342160"></p><p>界面效果如图：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725145401878.png" alt="image-20230725145401878"></p><h3 id="创建动画-Animation"><a href="#创建动画-Animation" class="headerlink" title="创建动画(Animation)"></a>创建动画(Animation)</h3><p>点击角色，然后在Window选项中选择Animation，创建单个动画</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725145801677.png" alt="image-20230725145801677"></p><p>随后会打开对应的页面</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725145822866.png" alt="image-20230725145822866"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725150003535.png" alt="image-20230725150003535"></p><p>选中我们要播放的动画，将其拖拽到Animation界面上：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725150204019.png" alt="image-20230725150204019"></p><p>可以在Animation界面的播放按钮预览当前动画效果</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725150430260.png" alt="image-20230725150430260"></p><p><code>Samples</code>越高播放越快</p><p>以上就完成了角色待机动画的创建，接下来还要进行其他动作动画（跳跃，攻击等）的创建，快捷创建Animations：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725150953853.png" alt="image-20230725150953853"></p><p>创建跑步的Animation，将对应的动画片段丢到Animation界面中即可：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725151344859.png" alt="image-20230725151344859"></p><h3 id="动画控制器控制动画"><a href="#动画控制器控制动画" class="headerlink" title="动画控制器控制动画"></a>动画控制器控制动画</h3><p>动画(Animation)创建完毕后会在<strong>Animatior</strong>界面上出现对应的容器，在界面中每个块也叫做<strong>状态</strong></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725153029470.png" alt="image-20230725153029470"></p><p>不同状态之间建立连接：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725153113643.png" alt="image-20230725153113643"></p><p>创建连接线连接到另外一个状态上</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725153140621.png" alt="image-20230725153140621"></p><h4 id="为动画切换设置条件"><a href="#为动画切换设置条件" class="headerlink" title="为动画切换设置条件"></a>为动画切换设置条件</h4><p>选中连接线，可以在右边界面看到条件框：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725153444747.png" alt="image-20230725153444747"></p><p>**PS:**虽然右边有条件框，但实际上动画切换条件的创建是在左边的<code>Parameters</code>选项下边进行创建</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725153843140.png" alt="image-20230725153843140"></p><p>在Parameters下创建对应的条件内容后，回到右边的<code>Conditions</code>框架内添加我们刚创建的条件内容：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725154055498.png" alt="image-20230725154055498"></p><p>然后还要对Setting里边的内容进行更改：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725154245042.png" alt="image-20230725154245042"></p><p>由于是2D游戏，我们不需要设置以上内容，所以全部关闭及设置0</p><p>然后补齐条件，将其设置为小于0.1时就相当于切换跑步动画：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725160331146.png" alt="image-20230725160331146"></p><p>此时还没有完成动画切换条件的设置，因为虽然条件设置了只有<code>&lt; 0.1</code>时会让动画控制器切换动画，但是我们还缺少给<code>velocityX</code>赋值的内容，所以接下来就是要在脚本内容中设置如何获得我们需要的数值</p><h3 id="创建管理控制动画的脚本"><a href="#创建管理控制动画的脚本" class="headerlink" title="创建管理控制动画的脚本"></a>创建管理控制动画的脚本</h3><p>在<code>Script</code>下Player文件夹下创建新的控制动画的脚本<code>PlayerAnimation</code>并将其添加到角色的组件中去：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725154759439.png" alt="image-20230725154759439"></p><p>编辑脚本内容：</p><p><strong>通过采用Animator类中的SetFloat方法来设置我们需要的切换动画条件的值</strong></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725155550588.png" alt="image-20230725155550588"></p><p><code>SetFloat</code>方法内参数的含义：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725155120625.png" alt="image-20230725155120625"></p><p>需要注意的是：</p><p>此时第二个参数<code>rb.velocity.x</code>虽然获取到了x轴的数值，但是由于我们在切换动画的条件内设置的是<code>&gt; velocity.x</code>，这会导致当我们启动的时候，角色向左跑(<strong>velocity.x&lt;0，为负数**)不会有跑步动画，但是向右跑(**velocity.x&gt;0，为正数</strong>)会有跑步动画</p><p>所以要进行修改：<code>Mathf.Abs</code>取绝对值</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725160121359.png" alt="image-20230725160121359"></p><h3 id="人物行走设定"><a href="#人物行走设定" class="headerlink" title="人物行走设定"></a>人物行走设定</h3><p>目的：当我们按下<code>Shift</code>键时强制切换为<strong>行走状态</strong></p><p>在输入系统<code>Input System</code>下的人物控制器创建新的<code>Action</code>:</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728144847625.png" alt="image-20230728144847625"></p><p>添加监听的按键：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728145053304.png" alt="image-20230728145053304"></p><p>在<code>PlayerController</code>脚本中编写实现走路的逻辑： 即<strong>速度减少一半相当于走路</strong></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728145920650.png" alt="image-20230728145920650"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728151410721.png" alt="image-20230728151410721"></p><p>这样完成后还有其它问题：</p><ul><li>切换走路后再切回来，速度没有变化(speed&#x2F;2)</li><li>切换走路后没有变成走路动画</li></ul><p>细节修改：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> runSpeed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> walkSpeed =&gt; runSpeed / <span class="number">2.5f</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">      ........</span><br><span class="line">          </span><br><span class="line">       <span class="meta">#<span class="keyword">region</span> 切换行走状态</span></span><br><span class="line">       runSpeed = speed;</span><br><span class="line">       </span><br><span class="line">       inputControl.GamePlay.WalkButtom.performed += ctx =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (physicsCheck.isGround)</span><br><span class="line">           &#123;</span><br><span class="line">               speed = walkSpeed;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       inputControl.GamePlay.WalkButtom.canceled += ctx =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (physicsCheck.isGround)</span><br><span class="line">           &#123;</span><br><span class="line">               speed = runSpeed;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>使用<code>region - endregion</code>方便管理代码块</p><p>添加正常走路动画并为其设置相应的动画转换连接线和切换条件</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725164245728.png" alt="image-20230725164245728"></p><h2 id="跳跃动画"><a href="#跳跃动画" class="headerlink" title="跳跃动画"></a>跳跃动画</h2><p>跳跃动画主要分为：<strong>起跳阶段和落地阶段</strong></p><p>先按人物基础动画制作流程将跳跃的四个阶段和落地的一个阶段对应的五个Animation创建出来：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725205145663.png" alt="image-20230725205145663"></p><p>由于这五个动画本质上都是实现跳跃，只是跳跃时期的不同阶段而已，所以可以采用<strong>混合树</strong>的方法将其整合到一起：</p><p>1、先创建混合树</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725205422475.png" alt="image-20230725205422475"></p><p>双击进入混合树的编辑页面：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725205549185.png" alt="image-20230725205549185"></p><p>2、在Motion列表中添加需要的一系列动画(Animation)</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725205803524.png" alt="image-20230725205803524"></p><p>将四个动画全部添加上去</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230725210026603.png" alt="image-20230725210026603"></p><p>同时在动画控制器左边的框内要新创建一个Float值<code>velocityY</code>，最终可以看到</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726112724341.png" alt="image-20230726112724341"></p><p>3、设置混合树切换不同动画的数值结点(Threshold)</p><p>而如何设置不同动画对应的值：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726112227200.png" alt="image-20230726112227200"></p><p>同时要回到<code>PlayerAnimation</code>脚本中添加实时获取<code>velocityY</code>值的代码：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726113149472.png" alt="image-20230726113149472"></p><h3 id="动画控制器绑定跳跃动画"><a href="#动画控制器绑定跳跃动画" class="headerlink" title="动画控制器绑定跳跃动画"></a>动画控制器绑定跳跃动画</h3><h4 id="起跳阶段绑定"><a href="#起跳阶段绑定" class="headerlink" title="起跳阶段绑定"></a>起跳阶段绑定</h4><p>创建完成跳跃动画(<strong>起跳阶段</strong>)的混合树后，接下来就是要在动画控制器中绑定这个跳跃状态了，而我们要实现可以使用跳跃来打断其他动画的效果，就要利用初始的<code>Any State</code>连接我们的跳跃状态：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726114132624.png" alt="image-20230726114132624"></p><p>同时在左边也创建一个新的判断值（isGround）：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726114206154.png" alt="image-20230726114206154"></p><p>然后绑定该判断值以及修改其它设置：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726114342644.png" alt="image-20230726114342644"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726114406211.png" alt="image-20230726114406211"></p><p>同时也要在<code>PlayerAnimation</code>脚本中编写获取该值的代码：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726120633315.png" alt="image-20230726120633315"></p><p>这样就设置好了跳跃起跳这一阶段的动画，随后还要把跳跃落地阶段的动画添加进来，然后和跳跃起跳阶段的动画连接起来，实现整个跳跃的完整流程</p><h4 id="落地阶段绑定"><a href="#落地阶段绑定" class="headerlink" title="落地阶段绑定"></a>落地阶段绑定</h4><p>连接落地动画：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726114801332.png" alt="image-20230726114801332"></p><p>设置切换的条件以及修改设置</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726114849101.png" alt="image-20230726114849101"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726120833927.png" alt="image-20230726120833927"></p><p>最后将整个跳跃动画完成之后再进入初始的动画：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726115125515.png" alt="image-20230726115125515"></p><p>这样就能<strong>实现跳跃动作可以先打断其他动画的效果了</strong></p><h4 id="细节打断落地"><a href="#细节打断落地" class="headerlink" title="细节打断落地"></a>细节打断落地</h4><p>当在台阶下落地立马跑步的时候，把落地动画给打断</p><p>在落地阶段动画中连接<code>Exit</code>状态，并添加判断条件：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230726121818956.png" alt="image-20230726121818956"></p><h2 id="下蹲动画与逻辑"><a href="#下蹲动画与逻辑" class="headerlink" title="下蹲动画与逻辑"></a>下蹲动画与逻辑</h2><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>下蹲动画分为两个阶段：<strong>开始下蹲</strong> 和 <strong>持续蹲姿</strong></p><p>流程为：当我们按下下蹲键时，先进行开始下蹲动画然后再进行持续蹲姿，如果我们没有送掉下蹲键那就一直保持蹲姿状态，一旦松掉按键就会恢复</p><ul><li>开始下蹲</li></ul><p><img src="/./../images/unity(%E4%B8%89)/image-20230728154049341.png" alt="image-20230728154049341"></p><ul><li>持续蹲姿</li></ul><p><img src="/./../images/unity(%E4%B8%89)/image-20230728154147725.png" alt="image-20230728154147725"></p><p>动画创建完成后接下来就是要进行绑定和条件切换</p><p>首先创建要用到的条件值<code>isCrouch</code>:</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728154750038.png" alt="image-20230728154750038"></p><h4 id="使用次级动画选择器-Sub-State-进行内部切换"><a href="#使用次级动画选择器-Sub-State-进行内部切换" class="headerlink" title="使用次级动画选择器(Sub-State)进行内部切换"></a>使用次级动画选择器(Sub-State)进行内部切换</h4><p><img src="/./../images/unity(%E4%B8%89)/image-20230728154940350.png" alt="image-20230728154940350"></p><p>创建连接线并设置条件：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728162050645.png" alt="image-20230728162050645"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728155102007.png" alt="image-20230728155102007"></p><p><strong>进入次级动画选择器进行动画切换的设置：</strong></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728155430276.png" alt="image-20230728155430276"></p><p>设置两个动画之间的连线并调整条件设置：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728155537099.png" alt="image-20230728155537099"></p><p>设置动画退出的连线并设置条件：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728155728936.png" alt="image-20230728155728936"></p><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p>在<code>PlayerController</code>控制脚本下进行下蹲逻辑的编辑：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728160320535.png" alt="image-20230728160320535"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728160403803.png" alt="image-20230728160403803"></p><p>将动画切换的条件也在<code>PlayerAnimation</code>脚本下进行添加：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728160829537.png" alt="image-20230728160829537"></p><p>通过切换模式可以实现在不同界面上观看启动后的游戏画面：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728162556187.png" alt="image-20230728162556187"></p><p>方便在运行时测试并观察碰撞体效果：</p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728164018449.png" alt="image-20230728164018449"></p><h3 id="碰撞体在下蹲时也修改"><a href="#碰撞体在下蹲时也修改" class="headerlink" title="碰撞体在下蹲时也修改"></a>碰撞体在下蹲时也修改</h3><p>碰撞体的重要变量有：</p><ul><li>偏移位置Offset(X,Y)</li><li>长度Size(X,Y)</li></ul><p><img src="/./../images/unity(%E4%B8%89)/image-20230728162810773.png" alt="image-20230728162810773"></p><p>由于两个变量都是(X,Y)，所以写入代码时定义的变量为<strong>Vector2</strong></p><p>在<code>PlayerController</code>脚本内编辑碰撞体变化的逻辑：</p><p><strong>碰撞体的大小和位移的修改要在unity界面自己根据实际需求进行调整最后确定</strong></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728164054457.png" alt="image-20230728164054457"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728164151581.png" alt="image-20230728164151581"></p><p><img src="/./../images/unity(%E4%B8%89)/image-20230728164232838.png" alt="image-20230728164232838"></p><p>最后可以在完善移动的细节：即当人物蹲下时不能进行移动</p><p>最终脚本修改完成后的代码：</p><p>人物控制脚本<code>PlayerController</code>代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> PlayerInputControls inputControl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Vector2 inputDirection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PhysicsCheck physicsCheck;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CapsuleCollider2D coll;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;基本参数&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> runSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> walkSpeed =&gt; runSpeed / <span class="number">2.5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> jumpForce;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isCrouch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector2 originalOffset;</span><br><span class="line">    <span class="keyword">private</span> Vector2 originalSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Awake 相当于生命周期</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line"></span><br><span class="line">        physicsCheck = GetComponent&lt;PhysicsCheck&gt;();</span><br><span class="line"></span><br><span class="line">        coll= GetComponent&lt;CapsuleCollider2D&gt;();</span><br><span class="line">        originalOffset = coll.offset;</span><br><span class="line">        originalSize = coll.size;</span><br><span class="line"></span><br><span class="line">        inputControl = <span class="keyword">new</span> PlayerInputControls();</span><br><span class="line"></span><br><span class="line">        inputControl.GamePlay.Jump.started += Jump;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 强制走路</span></span><br><span class="line">        runSpeed = speed;</span><br><span class="line">        inputControl.GamePlay.WalkButtom.performed += ctx =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (physicsCheck.isGround)</span><br><span class="line">            &#123;</span><br><span class="line">                speed = walkSpeed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        inputControl.GamePlay.WalkButtom.canceled += ctx =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (physicsCheck.isGround)</span><br><span class="line">            &#123;</span><br><span class="line">                speed = runSpeed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//物品被调用时则开始启用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputControl.Enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//物品被关闭时关闭启用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputControl.Disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//周期性的每帧执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputDirection = inputControl.GamePlay.Move.ReadValue&lt;Vector2&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FixedUpdate是一个固定更新的值</span></span><br><span class="line">    <span class="comment">//周期性的固定执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Move();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity = <span class="keyword">new</span> Vector2(inputDirection.x * speed * Time.deltaTime, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> faceDir = (<span class="built_in">int</span>)transform.localScale.x;</span><br><span class="line">        <span class="comment">//通过判断语句来确定当控制人物向左或者向右时进行翻转</span></span><br><span class="line">        <span class="comment">//向右是大于0，向左是小于0</span></span><br><span class="line">        <span class="keyword">if</span> (inputDirection.x &gt; <span class="number">0</span>)</span><br><span class="line">            faceDir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(inputDirection.x &lt; <span class="number">0</span>)</span><br><span class="line">            faceDir = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//人物翻转</span></span><br><span class="line">        transform.localScale = <span class="keyword">new</span> Vector3(faceDir, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下蹲</span></span><br><span class="line">        isCrouch = inputDirection.y &lt; <span class="number">-0.5f</span> &amp;&amp; physicsCheck.isGround;</span><br><span class="line">        <span class="keyword">if</span> (isCrouch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//修改碰撞体位移和大小</span></span><br><span class="line">            coll.offset = <span class="keyword">new</span> Vector2(<span class="number">-0.05f</span>, <span class="number">0.85f</span>);</span><br><span class="line">            coll.size = <span class="keyword">new</span> Vector2(<span class="number">0.7f</span>, <span class="number">1.7f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//还原碰撞体的参数</span></span><br><span class="line">            coll.offset = originalOffset;</span><br><span class="line">            coll.size = originalSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="comment">//private void OnTriggerStay2D(Collider2D other)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    Debug.Log(other.name);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params">InputAction.CallbackContext obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Debug.Log(&quot;Jump&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(physicsCheck.isGround)</span><br><span class="line">            rb.AddForce(transform.up * jumpForce, ForceMode2D.Impulse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>环境监测脚本<code>Physics Check</code>代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhysicsCheck</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;基本参数&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Vector2 bottomOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> checkReduis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LayerMask groundLayer;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;状态&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isGround;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Check();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Check</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检测地面</span></span><br><span class="line">        isGround = Physics2D.OverlapCircle((Vector2)transform.position+bottomOffset, checkReduis, groundLayer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmosSelected</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Gizmos.DrawWireSphere((Vector2)transform.position + bottomOffset, checkReduis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制动画的脚本<code>Player Animation</code>代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerAnimation</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注册的是动画控制器——Animator</span></span><br><span class="line">    <span class="keyword">private</span> Animator anim;</span><br><span class="line">    <span class="keyword">private</span> Rigidbody2D rb;</span><br><span class="line">    <span class="keyword">private</span> PhysicsCheck physicsCheck;</span><br><span class="line">    <span class="keyword">private</span> PlayerController playerController;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        anim = GetComponent&lt;Animator&gt;();</span><br><span class="line">        rb = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">        physicsCheck= GetComponent&lt;PhysicsCheck&gt;();</span><br><span class="line">        playerController= GetComponent&lt;PlayerController&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetAnimation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//管理所有动画</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetAnimation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        anim.SetFloat(<span class="string">&quot;velocityX&quot;</span>, Mathf.Abs(rb.velocity.x));</span><br><span class="line">        anim.SetFloat(<span class="string">&quot;velocityY&quot;</span>,rb.velocity.y);</span><br><span class="line">        anim.SetBool(<span class="string">&quot;isGround&quot;</span>, physicsCheck.isGround);</span><br><span class="line">        anim.SetBool(<span class="string">&quot;isCrouch&quot;</span>, playerController.isCrouch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（五）</title>
      <link href="/2023/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2023/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>哈希表（Hash Table），也称为散列表，是一种常用的数据结构，用于快速存储和查找键值对</p><p><img src="/./../../../typora-images/image-20230604202549205.png" alt="image-20230604202549205"></p><p>哈希表包含以下几个重要的部分：</p><ol><li>数组（Array）：数组是哈希表的基本数据结构，用于存储数据。<strong>数组中的每个元素称为桶（Bucket）或槽（Slot）</strong>，每个桶可以存储一个或多个键值对。</li><li>哈希函数（Hash Function）：哈希函数将键（Key）映射为哈希值（Hash Value），并用于确定键在数组中的存储位置。哈希函数的设计应该尽量减少冲突，即不同的键映射到相同的哈希值的概率较低。</li><li>冲突处理机制（Collision Resolution）：由于哈希函数的映射空间有限，不同的键可能会映射到相同的哈希值，导致冲突。冲突处理机制用于解决冲突，常见的方法包括链地址法和开放地址法。<ul><li>链地址法（Chaining）：每个桶存储一个链表或其他数据结构，相同哈希值的键值对存储在同一个桶中。当发生冲突时，新的键值对会添加到该桶的链表中。</li><li>开放地址法（Open Addressing）：发生冲突时，会通过一定的规则找到下一个可用的桶，将新的键值对存储在该桶中。常见的开放地址法包括线性探测、二次探测和双重哈希等。</li></ul></li><li>哈希表的存储过程：存储过程根据键的哈希值找到对应的桶，然后将键值对存储在桶中。如果发生冲突，根据冲突处理机制的规则，将新的键值对添加到桶的链表中或者找到下一个可用的桶。</li><li>哈希表的查找过程：查找过程根据键的哈希值找到对应的桶，然后在桶中查找目标键的值。如果桶中不存在目标键值对，则表示查找失败。如果存在冲突，根据冲突处理机制的规则，通过链表或其他方式遍历桶中的键值对，找到目标键的值。</li></ol><p>PS：<strong>哈希函数和数组：哈希函数根据键计算出哈希值，然后根据哈希值确定键在数组中的存储位置。</strong></p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>哈希函数（Hash Function）是一种将<strong>输入数据映射为固定长度哈希值</strong>（Hash Value）的函数。它的作用是将任意大小的输入数据转换为固定大小的输出，通常是一个整数或固定长度的字节数组。</p><p>哈希函数具有以下特性：</p><ol><li><strong>一致性</strong>：相同的输入始终产生相同的输出。即使输入数据发生微小的改变，输出结果也会有较大的差异。</li><li><strong>高效性</strong>：哈希函数的计算速度应该很快，能够在常数时间内完成计算。</li><li><strong>均匀性</strong>：哈希函数应该将输入数据均匀地映射到哈希值空间中，尽量减少哈希冲突的概率。</li></ol><h2 id="哈希表的存储方式"><a href="#哈希表的存储方式" class="headerlink" title="哈希表的存储方式"></a>哈希表的存储方式</h2><p>过程：</p><ol><li>计算哈希值：使用哈希函数对键进行计算，得到一个哈希值。哈希函数将键映射到哈希表的索引位置。</li><li>定位桶：根据哈希值定位到哈希表的对应桶（Bucket），即确定要存储键值对的位置。</li><li>冲突处理：如果发生哈希冲突，即多个键映射到同一个桶的情况，需要进行冲突处理。常见的冲突处理机制包括链地址法、开放地址法或公共溢出区域法，根据具体的冲突处理机制来存储键值对。</li><li>存储键值对：将键值对存储在确定的桶中。具体的存储方式取决于采用的冲突处理机制。对于链地址法，将键值对添加到桶的链表或其他数据结构中。对于开放地址法，将键值对存储在可用的桶中，或者按照一定的规则探测下一个可用的桶。对于公共溢出区域法，将键值对存储在共享的溢出区域中，并在桶中存储溢出区域的索引。</li><li>完成存储：存储过程完成后，键值对就被成功存储在哈希表中，可以通过哈希表的索引和冲突处理机制来进行快速的查找和访问。</li></ol><h2 id="哈希表的实现方式"><a href="#哈希表的实现方式" class="headerlink" title="哈希表的实现方式"></a>哈希表的实现方式</h2><ul><li>数组＋链表</li><li>数组＋二叉树</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>unity开发日记（二）</title>
      <link href="/2023/06/01/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/06/01/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity开发日记（二）"><a href="#Unity开发日记（二）" class="headerlink" title="Unity开发日记（二）"></a>Unity开发日记（二）</h1><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><h3 id="设置人物"><a href="#设置人物" class="headerlink" title="设置人物"></a>设置人物</h3><p>为人物添加重力组件</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605111521201.png" alt="image-20230605111521201"></p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605111704469.png" alt="image-20230605111704469"></p><p>人物添加了重物组件，但是由于还没有加入碰撞组件，所以启动时人物会一直往下落</p><p>为人物添加碰撞组件：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605112043971.png" alt="image-20230605112043971"></p><p>此时回到Sense界面可以看到人物的碰撞框架</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605112258723.png" alt="image-20230605112258723"></p><p>这时可以通过选择框架来调整他的碰撞体积大小：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605112328974.png" alt="image-20230605112328974"></p><p>通过框架的上下左右<strong>四个点</strong>来自定义调整大小，也可以通过快捷键<code>Alt</code>来进行对称调整</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605112549109.png" alt="image-20230605112549109"></p><p>也可以通过框架大小数值调整直接进行：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605112803391.png" alt="image-20230605112803391"></p><p>为角色下边的平台也设置上碰撞体积：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605132831942.png" alt="image-20230605132831942"></p><p>此时每个瓦片都有一个体积碰撞</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605132957771.png" alt="image-20230605132957771"></p><p>通过添加另外一个新组件，可以实现将所有瓦片都视为一个体积碰撞</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605133047191.png" alt="image-20230605133047191"></p><p>此时就可以在我们设置的平台碰撞体积上进行合并</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605133201147.png" alt="image-20230605133201147"></p><p>最终所有瓦片的体积碰撞也被我们合并了起来：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605133224377.png" alt="image-20230605133224377"></p><p>由于对瓦片增加了相应的碰撞体积组件，在对其添加后会自动为场景也设置上对应的<code>Rigdbody 2D</code>组件，这会导致当我们运行的时候场景也会受到重力影响一直往下掉落，所以还要对该组件进行另外设置：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605133639482.png" alt="image-20230605133639482"></p><p>这样就能够实现角色不会永久下落，而是站立在场景上，但另外一个问题是当角色的初始角度过高或者角色此时有一定旋转角度，这时候运行就会使得角色落地后倒在场景位置上，所以还要对角色的旋转角度固定住：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605134021135.png" alt="image-20230605134021135"></p><p>PS：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230605134932789.png" alt="image-20230605134932789"></p><h3 id="创建配置输入系统"><a href="#创建配置输入系统" class="headerlink" title="创建配置输入系统"></a>创建配置输入系统</h3><p>Assets目录下创建存放相关代码的Scripts包，包下再创建存放人物代码的Player文件夹</p><p>在Player文件夹下创建C#脚本</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230608131329662.png" alt="image-20230608131329662"></p><p>为角色添加刚创建的脚本：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230608132240279.png" alt="image-20230608132240279"></p><h4 id="修改输入系统"><a href="#修改输入系统" class="headerlink" title="修改输入系统"></a>修改输入系统</h4><p>Edit → Project Setting → Player → OtherSetting</p><p>在OtherSetting界面上修改：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230608140209592.png" alt="image-20230608140209592"></p><p>应用成功后进行下一步修改，回到主页面</p><p>Window选项 → Package Manager</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230608141540290.png" alt="image-20230608141540290"></p><p>安装input system</p><p>开始创建输入系统</p><ul><li><strong>手动创建方式：</strong></li></ul><p>在Setting文件夹下创建Input System文件包，在Input System文件包下创建输入系统：</p><p>点击左上角＋号添加</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230610100557802.png" alt="image-20230610100557802"></p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230610100701487.png" alt="image-20230610100701487"></p><p>点击进入控制面板，创建Action Map，同时创建我们需要的Action</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230701165032497.png" alt="image-20230701165032497"></p><p>例如创建对键盘键位的读取，选择Action类型为<code>Value</code>值，控制的类型为坐标系<code>Vector 2</code></p><p>同时可以对Action下各个内容进行绑定</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230701165227129.png" alt="image-20230701165227129"></p><p>这样就完成了对键盘按键的监测</p><p>此外，此时再次添加了一个对手柄的监测：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230701165448116.png" alt="image-20230701165448116"></p><p>在这时候要添加控制的配置表来定义什么时候用什么监测</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230701165636012.png" alt="image-20230701165636012"></p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230701165855881.png" alt="image-20230701165855881"></p><p>添加完后可以为每个Action选择对应的配置：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230701170037503.png" alt="image-20230701170037503"></p><ul><li><strong>自动创建方式：</strong></li></ul><p>选择角色，在添加组件中选择player input</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707165749383.png" alt="image-20230707165749383"></p><p>随后在右侧<code>Create Action</code>创建Action，选择我们即将要创建的文件夹，修改名字并创建完成后，它就会自动帮我们生成需要的Action</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707170057614.png" alt="image-20230707170057614"></p><p>如果要改成用代码来操控的话，需要先生成对应的C#代码：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707170757832.png" alt="image-20230707170757832"></p><p>在选择角色后右侧显示的框架内进入PlayerController代码中，在PlayerController导入刚创建好的操作脚本，同时定义脚本启用的情况：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707172051050.png" alt="image-20230707172051050"></p><p>问题：什么情况下是启用？什么情况下是关闭？</p><p>当<img src="/./../images/unity(%E4%BA%8C)/image-20230707172142841.png" alt="image-20230707172142841"></p><p>开启或关闭时就相当于程序中调用开启和关闭</p><p>获取MoveAction中的操控值：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707172701984.png" alt="image-20230707172701984"></p><p>MoveAction对应的值为Vector 2，所以在C#上也要定义对应的类型来获取：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707172627352.png" alt="image-20230707172627352"></p><p>保存后可以看到界面上多了我们新设置的操控值：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707172820364.png" alt="image-20230707172820364"></p><p>接下来要设置一个更新方法，来获取每一帧我们移动的操作：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707173302355.png" alt="image-20230707173302355"></p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230707173329199.png" alt="image-20230707173329199"></p><h3 id="实现人物的运动"><a href="#实现人物的运动" class="headerlink" title="实现人物的运动"></a>实现人物的运动</h3><p><strong>如果一个物品绑定了一个刚体，那么运动是通过刚体来进行的</strong></p><h4 id="人物移动"><a href="#人物移动" class="headerlink" title="人物移动"></a>人物移动</h4><ul><li>如何通过速度来驱动物体</li></ul><p>在<code>PlayerController</code>控制脚本中添加一个新的速度属性，来让前文编写的Vector2的左右值给到它</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230713110452782.png" alt="image-20230713110452782"></p><p>这样就能在unity的图形界面中也能看到新的速度边框了：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230713110530151.png" alt="image-20230713110530151"></p><p>接下来要在控制脚本中也编写一个刚体属性，绑定到unity上边我们需要用到的刚体，从而让后续的动作操作能够执行：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230713111020075.png" alt="image-20230713111020075"></p><p>在unity界面上查看并进行绑定：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230713111120884.png" alt="image-20230713111120884"></p><p>PS：需要注意的是，此时刚体的属性为public，也就是为初始就能进行绑定，如果改为private的话，保存之后的unity界面并不会显示到该属性值，这样就不能做到一个初始化就绑定刚体的操作，需要用其他方式来获得</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230713111730448.png" alt="image-20230713111730448"></p><p>绑定速度实现左右移动(x，y)：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230713112040013.png" alt="image-20230713112040013"></p><p>保持人物落地时的速度(默认0会导致人物下落时十分缓慢)：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230721183058351.png" alt="image-20230721183058351"></p><h4 id="人物翻转"><a href="#人物翻转" class="headerlink" title="人物翻转"></a>人物翻转</h4><ul><li>如何翻转人物(实现人物的调头)</li></ul><p>通过Scale的X或Y轴进行人物的翻转，最常用的是基于X轴进行的翻转</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722103424671.png" alt="image-20230722103424671"></p><p>在人物控制脚本中绑定并实现翻转：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722104136092.png" alt="image-20230722104136092"></p><h4 id="人物跳跃"><a href="#人物跳跃" class="headerlink" title="人物跳跃"></a>人物跳跃</h4><ul><li>如何实现人物的跳跃</li></ul><p>在<code>Input System</code>系统中添加新的Action：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722105454331.png" alt="image-20230722105454331"></p><p>然后在PlayerController控制脚本中绑定编写相关内容:</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722112247589.png" alt="image-20230722112247589"></p><p><strong><code>+=</code>符号表示注册内容，相当于把+&#x3D;后边的函数给到前边的内容</strong></p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722112812139.png" alt="image-20230722112812139"></p><p>返回测试：</p><p>​注意：此时代码中虽然定义了jumpForce变量，但是并没有在脚本中进行赋值，赋值的地方可以在unity UI界面上手动添加值，然后保存就行</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722113005867.png" alt="image-20230722113005867"></p><p>同时，为了让跳跃效果更好一点，可以按如下配置进行更改：</p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722113128337.png" alt="image-20230722113128337"></p><p><img src="/./../images/unity(%E4%BA%8C)/image-20230722113147187.png" alt="image-20230722113147187"></p><p>到这里为止，跳跃还会遇到的其他问题大致有：</p><ul><li>空中无限跳跃</li><li>跳完之后松开方向键没有惯性向前</li><li>按键时间长短和跳起高度的绑定</li></ul><p>最后完成的PlayerController脚本代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> PlayerInputControls inputControl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rigidbody2D rb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Vector2 inputDirection;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;基本参数&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> jumpForce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Awake 相当于生命周期</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">        inputControl = <span class="keyword">new</span> PlayerInputControls();</span><br><span class="line"></span><br><span class="line">        inputControl.GamePlay.Jump.started += Jump;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//物品被调用时则开始启用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputControl.Enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//物品被关闭时关闭启用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputControl.Disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//周期性的每帧执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputDirection = inputControl.GamePlay.Move.ReadValue&lt;Vector2&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FixedUpdate是一个固定更新的值</span></span><br><span class="line">    <span class="comment">//周期性的固定执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Move();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rb.velocity = <span class="keyword">new</span> Vector2(inputDirection.x * speed * Time.deltaTime, rb.velocity.y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> faceDir = (<span class="built_in">int</span>)transform.localScale.x;</span><br><span class="line">        <span class="comment">//通过判断语句来确定当控制人物向左或者向右时进行翻转</span></span><br><span class="line">        <span class="comment">//向右是大于0，向左是小于0</span></span><br><span class="line">        <span class="keyword">if</span> (inputDirection.x &gt; <span class="number">0</span>)</span><br><span class="line">            faceDir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(inputDirection.x &lt; <span class="number">0</span>)</span><br><span class="line">            faceDir = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//人物翻转</span></span><br><span class="line">        transform.localScale = <span class="keyword">new</span> Vector3(faceDir, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Jump</span>(<span class="params">InputAction.CallbackContext obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Debug.Log(&quot;Jump&quot;);</span></span><br><span class="line">        rb.AddForce(transform.up * jumpForce, ForceMode2D.Impulse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>unity开发日记 (一)</title>
      <link href="/2023/05/22/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/05/22/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity开发日记（一）"><a href="#Unity开发日记（一）" class="headerlink" title="Unity开发日记（一）"></a>Unity开发日记（一）</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="对导入素材进行调整"><a href="#对导入素材进行调整" class="headerlink" title="对导入素材进行调整"></a>对导入素材进行调整</h3><p><strong>背景素材调整</strong>：</p><p>导入素材之后调整素材大小</p><p>比较简单粗糙的调整素材大小方式(<strong>一般开发不采用</strong>)：</p><p><img src="/../images/unity(%E4%B8%80)/1.png" alt="1"></p><p><img src="/../images/unity(%E4%B8%80)/2.png" alt="2"></p><p>较为常用的方式(通过像素点来按比例进行调整)：</p><p><code>Pixels Per Unit</code>代表每个格子当中显示多少个像素单位，根据美术素材的不同(16 * 16,32 * 32等)进行调整</p><p><img src="/../images/unity(%E4%B8%80)/3.png" alt="3"></p><p>同时还要进行调整的地方有：</p><p>一般像素游戏的渲染模式都会选择Point(即没有渲染)</p><p><img src="/../images/unity(%E4%B8%80)/4.png" alt="4"></p><p>调整压缩</p><p><img src="/../images/unity(%E4%B8%80)/5.png" alt="5"></p><p><strong>动作集(任务素材)调整</strong>：</p><p>如何查看总体动作素材集：</p><p><img src="/../images/unity(%E4%B8%80)/6.png" alt="6"></p><p>打开后的显示为：</p><p><img src="/../images/unity(%E4%B8%80)/7.png" alt="7"></p><p><strong>目的：</strong>对该图集进行切割，方便接下来开发流程中的使用</p><h4 id="切割图集"><a href="#切割图集" class="headerlink" title="切割图集"></a>切割图集</h4><p>首先调整图集：</p><p><img src="/../images/unity(%E4%B8%80)/8.png" alt="8"></p><p>下方的渲染和压缩同上进行修改即可</p><p><strong>开始进行素材的切割：</strong></p><p><img src="/../images/unity(%E4%B8%80)/9.png" alt="9"></p><p>调整切割方式：</p><p><img src="/../images/unity(%E4%B8%80)/10.png" alt="10"></p><p>切割后效果：</p><p><img src="/../images/unity(%E4%B8%80)/11.png" alt="11"></p><p>PS：切割后要记得应用<img src="/../images/unity(%E4%B8%80)/12.png" alt="12"></p><p>同时退出切割页面后，在编辑页面仍然要重新进行应用</p><p><img src="/../images/unity(%E4%B8%80)/13.png" alt="13"></p><p>最终对图片集展开就可以使用每一个已经被切割出来的素材图片了</p><p><img src="/../images/unity(%E4%B8%80)/14.png" alt="14"></p><h4 id="场景绘制"><a href="#场景绘制" class="headerlink" title="场景绘制"></a>场景绘制</h4><p>对对应的场景素材先进行相应的调整：</p><p><img src="/../images/unity(%E4%B8%80)/15.png" alt="15"></p><p><img src="/../images/unity(%E4%B8%80)/16.png" alt="16"></p><p>渲染和压缩也要进行调整，同其他素材一样调整为<code>Point</code>和<code>None</code></p><p>随后开始<strong>对素材进行切割</strong>：</p><p><img src="/../images/unity(%E4%B8%80)/17.png" alt="17"></p><p>完成切割：</p><p><img src="/../images/unity(%E4%B8%80)/18.png" alt="18"></p><p><strong>对场景进行绘制</strong>：</p><p>使用2D场景绘制工具进行场景的绘制</p><h5 id="调色盘的使用"><a href="#调色盘的使用" class="headerlink" title="调色盘的使用"></a>调色盘的使用</h5><p><img src="/../images/unity(%E4%B8%80)/19.png" alt="19"></p><p><strong>创建新的调色盘：</strong></p><p><img src="/../images/unity(%E4%B8%80)/20.png" alt="20"></p><p>在Assets同级目录下创建方便管理的调色盘文件夹Titlemap，进入Titlemap文件夹再次创建方便管理每一个瓦块的文件夹Palettes，最后选择Palettes文件夹完成创建调色盘的工作</p><p>完成调色盘的创建：</p><p><img src="/../images/unity(%E4%B8%80)/21.png" alt="21"></p><p><strong>将切割后的场景素材拖拽到调色盘界面上</strong>：</p><p><img src="/../images/unity(%E4%B8%80)/22.png" alt="22"></p><p>拖拽后会显示让你添加到哪个文件夹上，这时在Palettes文件夹同级目录下再次创建一个Tiles文件夹，进入该文件夹再次创建一个Forest 1文件夹进行存放所有要进行调色的素材</p><p>完成素材的拖拽后：</p><p><img src="/../images/unity(%E4%B8%80)/23.png" alt="23"></p><p>接下来就是要对每一个瓦片进行调整：</p><p>在编辑器上先创建Tilemap</p><p><img src="/../images/unity(%E4%B8%80)/24.png" alt="24"></p><p><img src="/../images/unity(%E4%B8%80)/25.png" alt="25"></p><p>这时我们的编辑器格子很明显</p><p><img src="/../images/unity(%E4%B8%80)/26.png" alt="26"></p><p>然后<strong>回到调色盘编辑界面（Tile Palette）进行选择：</strong></p><p><img src="/../images/unity(%E4%B8%80)/27.png" alt="27"></p><p>这时就可以选择我们想要的瓦片来进行绘制了</p><p><img src="/../images/unity(%E4%B8%80)/28.png" alt="28"></p><p>绘制完成后查看在游戏中的效果：</p><p>如果要更改画面中视距的效果，可以通过<code>Free Aspect</code>调整</p><p><img src="/../images/unity(%E4%B8%80)/29.png" alt="29"></p><p>最主要的调整方式还是通过相机来进行调整：</p><p><img src="/../images/unity(%E4%B8%80)/30.png" alt="30"></p><p>而在进行场景绘制的时候，如果场景挡住了人物，此时就可以用到<strong>叠层</strong></p><h4 id="叠层设置"><a href="#叠层设置" class="headerlink" title="叠层设置"></a>叠层设置</h4><p>通过对物体的<code>Sprite Renderer</code>组件内进行叠层设置</p><p><img src="/../images/unity(%E4%B8%80)/31.png" alt="31"></p><p><strong>其中<code>Sorting Layer</code>代表不同层，<code>Order in Layer</code>代表同层下不同次序</strong></p><p><img src="/../images/unity(%E4%B8%80)/32.png" alt="32"></p><p>为角色模型设置层次：</p><p><img src="/../images/unity(%E4%B8%80)/33.png" alt="33"></p><p>具体效果展示为：</p><p>当没有设置叠层时(即场景和人物的Layer都为Default)</p><p><img src="/../images/unity(%E4%B8%80)/34.png" alt="34"></p><p>当为角色设置完层次之后</p><p><img src="/../images/unity(%E4%B8%80)/35.png" alt="35"></p><p>同理，通过叠层设置背景效果：</p><p><img src="/../images/unity(%E4%B8%80)/36.png" alt="36"></p><p>通过<code>Tilemap Focus</code>小工具来选定Tilemap，从而让我们更清晰的知道我们当前编辑或要编辑的图层是哪一个</p><p><img src="/../images/unity(%E4%B8%80)/37.png" alt="37"></p><h4 id="规则瓦片和动态瓦片"><a href="#规则瓦片和动态瓦片" class="headerlink" title="规则瓦片和动态瓦片"></a>规则瓦片和动态瓦片</h4><h5 id="规则瓦片"><a href="#规则瓦片" class="headerlink" title="规则瓦片"></a>规则瓦片</h5><p>作用：能够高效率地绘制出相对完整的地图，通过自定义不同瓦片来实现</p><p>在瓦片文件夹(Tiles)下新建存放的规则瓦片文件夹(Rule Tiles)，在该文件夹下创建规则瓦片</p><p><img src="/../images/unity(%E4%B8%80)/38.png" alt="38"></p><p>先对切割好的场景素材重新命名，方便接下来规则瓦片的使用</p><p>命名完成后开始进行规则瓦片的编辑：</p><p><img src="/../images/unity(%E4%B8%80)/39.png" alt="39"></p><p>选择瓦片，同时<strong>定义该瓦片在什么情况下出现</strong></p><p><img src="/../images/unity(%E4%B8%80)/40.png" alt="40"></p><p><img src="/../images/unity(%E4%B8%80)/41.png" alt="41"></p><p>部分瓦片（例如地面中间部分的瓦片）可以进行随机</p><p><img src="/../images/unity(%E4%B8%80)/42.png" alt="42"></p><p><img src="/../images/unity(%E4%B8%80)/43.png" alt="43"></p><p>PS：<code>Noise</code>表示在随机的几个中的比重</p><p>添加完成</p><p><img src="/../images/unity(%E4%B8%80)/44.png" alt="44"></p><p>接下来需要把我们自定义的规则瓦片添加到调色盘上，从而让我们可以直接拿去绘制</p><p><img src="/../images/unity(%E4%B8%80)/45.png" alt="45"></p><p>绘制测试效果</p><p><img src="/../images/unity(%E4%B8%80)/46.png" alt="46"></p><p>拐角处的瓦片过渡不自然，所以要再次修改规则瓦片，添加对应的转角处瓦片</p><p><img src="/../images/unity(%E4%B8%80)/47.png" alt="47"></p><h5 id="动态瓦片"><a href="#动态瓦片" class="headerlink" title="动态瓦片"></a>动态瓦片</h5><p>作用：实现动态效果（比如瀑布）</p><p>原理：几个瓦片逐层逐帧进行切换，实现类似霓虹灯那样的视角效果，从而达到动态</p><p>在瓦片文件夹(Tiles)下新建存放的规则瓦片文件夹(Animated Tiles)，在该文件夹下创建规则瓦片</p><p><img src="/../images/unity(%E4%B8%80)/48.png" alt="48"></p><p>同时为我们要用到的瓦片进行修改命名，随后开始添加到动态瓦片中</p><p>假设瀑布现在要搞成3(列)*4(行)的形式，此时就要分别在左中右各设置一个包含四张瀑布的动态瓦片</p><p><img src="/../images/unity(%E4%B8%80)/49.png" alt="49"></p><p>保存后将该动态瓦片更新到调色盘上：</p><p><img src="/../images/unity(%E4%B8%80)/50.png" alt="50"></p><p>查看效果</p><p><img src="/../images/unity(%E4%B8%80)/51.png" alt="51"></p><p>可以调节动态瓦片的速度：</p><p><img src="/../images/unity(%E4%B8%80)/52.png" alt="52"></p><p>按该步骤继续完成第二列第三列的瀑布编辑</p><p><img src="/../images/unity(%E4%B8%80)/53.png" alt="53"></p><p>最终展示效果：<img src="/../images/unity(%E4%B8%80)/54.png" alt="54"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（四）</title>
      <link href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><strong>图的基本概念：</strong>在图形结构中，<strong>结点之间的关系可以是任意</strong>的，图中任意两个数据元素之间都可能相关</p><p>图的定义：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302092959390.png" alt="image-20230302092959390"></p><p>PS：线性表可以是空表，树可以是空树，但是<strong>图不可以是空图</strong>（图中不能一个顶点也没有）</p><h2 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><ul><li>无向图</li></ul><p><strong>无向图中的边没有方向</strong>，(vi,vj)表示连接顶点vi和vj之间的一条边，即(vi,vj)和(vj,vi)表示的是同一条边</p><p>树是连通的无回路的无向图，若一棵树有n个顶点，则必有n-1条边</p><ul><li>有向图</li></ul><p><strong>有向图中的边有方向</strong>，&lt;vi,vj&gt;表示从顶点vi到vj的一条有向边，vi是边的起点，vj是边的终点，即&lt;vi,vj&gt;和&lt;vj,vi&gt;表示的不是同一条边</p><p>有向图还可分为<strong>简单图</strong>和<strong>多重图</strong></p><p>多重图：指图中两个顶点之间有重复边</p><ul><li>完全图</li></ul><p>完全图是边数打到最大值的图。若有n个顶点，则完全无向图的边数为<code>n(n-1)/2</code>,完全有向图的边数为<code>n(n-1)</code></p><ul><li>带权图</li></ul><p>带权图指图中的边具有权值（权值有不同的含义）</p><ul><li>邻接顶点</li></ul><p>若(vi，vj)是无向图中的一条边，则vi和vj互为邻接顶点，边(vi，vj)依附于顶点vi和vj</p><p>若&lt;vi，vj&gt;是有向图中的一条边，则vi邻接到vj，vj邻接自vi，边&lt;vi，vj&gt;与vi和vj相关联</p><h3 id="顶点的度"><a href="#顶点的度" class="headerlink" title="顶点的度"></a>顶点的度</h3><p>顶点的度是指与顶点vi关联的<strong>边数</strong>，记作<code>degree(vi)</code></p><p>度为0的顶点称为孤立点，度为1的顶点称为悬挂点</p><p>在有向图中，以<strong>vi为终点的边数称为vi的入度</strong>，记作<code>indegree(vi)</code>；<strong>以vi为起点的边数称为vi的出度</strong>，记作<code>outdegree(vi)</code></p><p>PS：在有向图中，顶点的度 &#x3D; 该顶点的出度 + 该顶点的入度</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><ul><li>路径</li></ul><p>接续的边构成的顶点序列</p><ul><li>路径长度</li></ul><p>路径上边或弧的数目&#x2F;权值之和（不带权图算边数，带权图算权数和）</p><ul><li>回路</li></ul><p>第一个顶点和最后一个顶点相同的路径</p><ul><li>简单路径</li></ul><p>除路径起点和终点可以相同外，其余顶点均不相同</p><ul><li>简单回路(环)</li></ul><p>除路径起点和终点相同且长度大于1的简单路径</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302095321818.png" alt="image-20230302095321818"></p><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302095729492.png" alt="image-20230302095729492"></p><p>以下，(b)和(c)都是(a)的子图</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302095751667.png" alt="image-20230302095751667"></p><p>若G1≠G，称图G1是G的<strong>真子图</strong></p><p>若G1是G的子图，但V1&#x3D;V，称G1是G的<strong>生成子图</strong></p><h3 id="连通性、生成树"><a href="#连通性、生成树" class="headerlink" title="连通性、生成树"></a>连通性、生成树</h3><p>在图G中，若从顶点vi到vj有路径，则称vi和vj是连通的。</p><p>若每对顶点vi和vj都是连通的，则称G为<strong>连通图</strong>(强连通图)<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302100353660.png" alt="image-20230302100353660"></p><p>（无向图）<strong>非连通图</strong>的极大连通子图成为该图的<strong>连通分量</strong>；</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302100519090.png" alt="image-20230302100519090"></p><p>(有向图) <strong>非强连通图</strong>的极大连通子图成为该图的<strong>强连通分量</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302100650446.png" alt="image-20230302100650446"></p><p>连通无向图G的<strong>生成树</strong>是指G的一个<strong>极小连通生成子树</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302101202957.png" alt="image-20230302101202957"></p><p>各连通分量均为树的无向图称为森林</p><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><h3 id="邻接矩阵-数组表示"><a href="#邻接矩阵-数组表示" class="headerlink" title="邻接矩阵(数组表示)"></a>邻接矩阵(数组表示)</h3><p><strong>图的邻接矩阵(Adjacency Matrix) 存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息</strong></p><p>建立一个顶点表（记录各个顶点信息）和一个邻接矩阵（表示各个顶点之间的关系）</p><p><strong>无向图的邻接矩阵表示：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302102452796.png" alt="image-20230302102452796"></p><p><strong>特点：</strong></p><p>无向图的邻接矩阵是对称的</p><p>顶点i的度 &#x3D; 第i行(列)中1的个数</p><p><strong>有向图的邻接矩阵表示：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302102418265.png" alt="image-20230302102418265"></p><p>特点：</p><p>有向图的邻接矩阵可能是不对称的</p><p>顶点的出度 &#x3D; 第i行元素之和</p><p>顶点的入度 &#x3D; 第i列元素之和</p><p>顶点的度 &#x3D; 第i行元素之和+第i列元素之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="邻接表-链式"><a href="#邻接表-链式" class="headerlink" title="邻接表(链式)"></a>邻接表(链式)</h3><p>邻接表由两部分组成：<strong>表头结点表</strong>和<strong>边表</strong></p><p>邻接表中每个单链表的<strong>第一个结点</strong>存放有关<strong>顶点的信息</strong>，把这一结点看成链表的表头，<strong>其余结点存放有关边的信息</strong></p><p><strong>表头结点表：</strong>包括<strong>数据域</strong>和<strong>链域</strong>，数据域存储<strong>顶点的名称</strong>，链域用于指向链表中第一个结点（<strong>与顶点邻接的第一个顶点</strong>）</p><p><strong>边表：</strong>包括<strong>邻接点域</strong>（指示与顶点邻接的点在图中的位置，即<strong>数组下标</strong>）、(<strong>数据域</strong>（存储和边相关的信息，如<strong>权值</strong>）、)<strong>链域</strong>（指示<strong>与顶点邻接的下一条边的结点</strong>）</p><p>无向图的邻接表：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302131743954.png" alt="image-20230302131743954"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（三）</title>
      <link href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="树的基本定义"><a href="#树的基本定义" class="headerlink" title="树的基本定义"></a>树的基本定义</h2><p>树是由n(n&gt;&#x3D;1)个有限结点组成一个具有层次关系的集合</p><p>树具有以下特点：</p><ul><li>每个结点有零个或多个子结点</li><li>没有父结点的结点为根结点</li><li>每一个非根结点只有一个父结点</li><li>每个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父结点的一个子树</li></ul><h2 id="树的相关术语"><a href="#树的相关术语" class="headerlink" title="树的相关术语"></a>树的相关术语</h2><p><strong>结点的度：</strong></p><p>​一个结点含有的子树的个数称为该结点的度</p><p><strong>叶结点：</strong></p><p>​度为0的结点称为叶结点（也叫终端结点）</p><p><strong>分支结点：</strong></p><p>​度不为0的结点称为分支结点（也叫非终端结点）</p><p><strong>结点的层次：</strong></p><p>​从根结点开始，根结点的层次为1,根的直接后继层次为2，以此类推</p><p><strong>结点的层序编号：</strong></p><p>​将树中的结点，按照从上层到下层，同层从左到右的次序排成一个线性序列，把他们编成连续的自然数</p><p><strong>树的度：</strong></p><p>​树中所有结点的度的最大值</p><p><strong>树的高度：</strong></p><p>​树中结点的最大层次</p><p><strong>孩子结点：</strong></p><p>​一个结点的直接后继结点称为该结点的孩子结点</p><p><strong>双亲结点：</strong></p><p>​一个结点的直接前驱称为该结点的双亲结点</p><p><strong>兄弟结点：</strong></p><p>​同一双亲结点的孩子结点间互称为兄弟结点</p><p><strong>对某个节点</strong>:<br><strong>深度</strong>是指从根节点到该节点的最长简单路径边的条数；<br><strong>高度</strong>是指从<strong>最下面</strong>的叶子结点到该节点的最长简单路径边的条数；</p><p><strong>对二叉树：</strong><br><strong>深度</strong>是从根节点数到它的叶节点；<br><strong>高度</strong>是从叶节点数到它的根节点；<br><strong>注意： 树的深度和高度一样，但是具体到树的某个节点，其深度和高度不一样</strong></p><h2 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h2><ul><li>满二叉树</li><li>完全二叉树</li><li>二叉搜索树</li><li>平衡二叉搜索树</li></ul><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><p><strong>性质1：</strong>若根节点的层次为1，则二叉树第i层最多有<strong>2^i-1</strong>（i&gt;&#x3D;1）个结点</p><p><strong>性质2：</strong>在高度为h的二叉树中，最多有<strong>2^h-1</strong>个结点（h&gt;&#x3D;0）</p><p><strong>性质3：</strong>设一棵二叉树的叶子结点数为n0，2度结点数为n2，则<strong>n0 &#x3D; n2+1</strong></p><p><strong>性质4：</strong>一棵具有n个结点的完全二叉树，其高度h&#x3D;</p><p><strong>性质5：</strong>一棵具有n个结点的完全二叉树，对序号为i（0&lt;&#x3D;i&lt;&#x3D;n）的结点，有：</p><p>​1）若i&#x3D;0，则i为根结点；若i&gt;0，则i的父母结点序号为**[(i-1)&#x2F;2]**</p><p>​2）若2i+1&lt;n，则i的<strong>左孩子结点序号为2i+1</strong>；否则，i无左孩子</p><p>​3）若2i+2&gt;n，则i的<strong>右孩子结点序号为2i+2</strong>；否则，i无右孩子</p><h2 id="树的存储"><a href="#树的存储" class="headerlink" title="树的存储"></a>树的存储</h2><ul><li><p><strong>链式存储</strong></p></li><li><p><strong>线式存储(常用)</strong></p></li></ul><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><ul><li><strong>前序遍历</strong></li></ul><p>前序遍历先访问根结点，然后遍历左子树，最后遍历右子树<strong>(左中右)</strong></p><ul><li><strong>中序遍历</strong></li></ul><p>中序遍历是先遍历左子树，然后访问根结点，然后遍历右子树<strong>(中左右)</strong></p><ul><li><strong>后序遍历</strong></li></ul><p>后序遍历是先遍历左子树，然后遍历右子树，最后访问根节点<strong>(左右中)</strong></p><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><ul><li>层序遍历</li></ul><h2 id="构建二叉树"><a href="#构建二叉树" class="headerlink" title="构建二叉树"></a>构建二叉树</h2><p>例子：</p><p>以<strong>字符串</strong>方式构建二叉树</p><p>描述为：能够根据字符串<code>“A(B(,D),C)”</code>构造二叉树，构建后的树如图</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221112142020303.png" alt="image-20221112142020303"></p><p>解题思路参考：<a href="https://www.bilibili.com/video/BV1CK4y1G7b3">https://www.bilibili.com/video/BV1CK4y1G7b3</a></p><p>采用<strong>栈</strong>的方式来构建</p><p><strong>树结点：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">char</span> data; <span class="comment">//结点的值</span></span><br><span class="line">    TreeNode left;  <span class="comment">//左孩子</span></span><br><span class="line">    TreeNode right; <span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">char</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">char</span> data, TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构建树：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTree</span>&#123;</span><br><span class="line">    TreeNode root; <span class="comment">//根结点</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">()</span>&#123;<span class="built_in">this</span>.root = <span class="literal">null</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cut</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//用来标记左/右子树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i)==<span class="string">&#x27;(&#x27;</span>)&#123; <span class="comment">//左括号说明此时结点有子树，同时将结点塞入栈中</span></span><br><span class="line">                st.push(node);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i)==<span class="string">&#x27;,&#x27;</span>)&#123;<span class="comment">//逗号说明接下来的结点是右子树</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i)==<span class="string">&#x27;)&#x27;</span>)&#123;<span class="comment">//右括号表示一个子树完成，此时要将子树的根节点弹出栈</span></span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(str.charAt(i));<span class="comment">//初始化赋值   </span></span><br><span class="line">                <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">                    root = node;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!st.isEmpty())&#123;</span><br><span class="line">                          <span class="keyword">if</span>(flag)&#123;<span class="comment">//为栈顶的结点连接对应的左孩子</span></span><br><span class="line">                    st.peek().left = node;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//为栈顶的结点连接对应的右孩子</span></span><br><span class="line">                    st.peek().right = node;</span><br><span class="line">                &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树中查找X值"><a href="#二叉树中查找X值" class="headerlink" title="二叉树中查找X值"></a>二叉树中查找X值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">findNode</span><span class="params">(TreeNode t,<span class="type">char</span> c)</span>&#123;</span><br><span class="line">    TreeNode p;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t.data==c)&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p = findNode(t.left,c);</span><br><span class="line">        <span class="keyword">if</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findNode(t.right,c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h2><p>定义结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>前序遍历方式（中左右）：</p><ul><li><strong>递归（常用）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preOrder</span>(TreeNode tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    System.out.printf(tree.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    preOrder(tree.left);</span><br><span class="line">    preOrder(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>栈</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder2</span><span class="params">(TreeNode tree)</span>&#123;</span><br><span class="line">       Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">       st.push(tree);</span><br><span class="line">       <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">t1</span> <span class="operator">=</span> st.peek();</span><br><span class="line">           st.pop();</span><br><span class="line">           System.out.println(t1.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (t1.right!=<span class="literal">null</span>)</span><br><span class="line">               st.push(t1.right);</span><br><span class="line">           <span class="keyword">if</span> (t1.left!=<span class="literal">null</span>)</span><br><span class="line">               st.push(t1.left);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>参考学习视频：<a href="https://www.bilibili.com/video/BV15f4y1W7i2">https://www.bilibili.com/video/BV15f4y1W7i2</a></p><h2 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preOrder</span>(TreeNode tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    preOrder(tree.left);</span><br><span class="line">    System.out.printf(tree.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    preOrder(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preOrder</span>(TreeNode tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    preOrder(tree.left);</span><br><span class="line">    preOrder(tree.right);</span><br><span class="line">    System.out.printf(tree.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（二）</title>
      <link href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><p>定义：是只允许在一端进行插入或删除的<strong>线性表</strong>。限定这种线性表只能在某一端进行插入和删除操作</p><p><strong>特点：后进先出</strong></p><h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><p>根据选用不同的存储结构来构建不同的栈</p><ul><li>顺序栈</li><li>链栈</li><li>共享栈</li></ul><h2 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><ul><li>InitStack：初始化一个空栈</li><li>StackEmpty:  判断一个栈是否为空</li><li>Push：进栈</li><li>Pop：出栈</li><li>GetTop：读取栈顶元素</li><li>DestoryStack：销毁栈，释放栈占用的存储空间</li></ul><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h1><p> 定义：队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的<strong>线性表</strong></p><p><strong>特点：先进先出</strong></p><h2 id="种类-1"><a href="#种类-1" class="headerlink" title="种类"></a>种类</h2><ul><li>顺序队列</li><li>循环队列</li><li>链队列</li><li>双端队列</li></ul><h2 id="队列的常用操作"><a href="#队列的常用操作" class="headerlink" title="队列的常用操作"></a>队列的常用操作</h2><ul><li>isEmpty：判断队列是否为空</li><li>isFull: 判断队列是否已满</li><li>add：入队</li><li>poll：出队</li><li>peek：返回队头元素</li></ul><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] element;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        size = n;</span><br><span class="line">        element = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        front = -<span class="number">1</span>;</span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否已满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == size-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            size = size*<span class="number">2</span>;</span><br><span class="line">            element = Arrays.copyOf(element,size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (front==-<span class="number">1</span>)</span><br><span class="line">            front++;</span><br><span class="line">        rear++;</span><br><span class="line">        element[rear] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front==rear-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(peek());</span><br><span class="line">        front++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队头元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> element[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询队列所有内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front;i&lt;=rear;i++)&#123;</span><br><span class="line">            System.out.println(element[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h3><p>结点类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Node next;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedQueue</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    Node rear,front;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.rear = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.front = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队(尾插法)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (front == <span class="literal">null</span>)&#123;</span><br><span class="line">            front = rear = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            rear.next = node;</span><br><span class="line">            rear = rear.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(peek());</span><br><span class="line">        front = front.next;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历队列内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> front;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.size;i++)&#123;</span><br><span class="line">            System.out.println(cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/11/07/first/"/>
      <url>/2022/11/07/first/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构(一)</title>
      <link href="/2022/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>定义：零个或多个数据元素的有限序列</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>线性表的存储结构分为：</p><ul><li>顺序存储</li><li>链式存储</li></ul><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><p>特点：逻辑上相邻的数据元素，其物理次序也是相邻的</p><p><strong>顺序表的构造与设计：</strong></p><p>SeqList<T>顺序表必有<strong>两个成员变量</strong>，一个数组存放数据，一个表示顺序表元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] element;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeqList</span><span class="params">()</span>&#123;<span class="built_in">this</span>&#123;<span class="number">10</span>&#125;;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>增添数据</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> t)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element[n++] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置增添元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i，<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;<span class="built_in">this</span>.element.length-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//数组下标不合法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;不合法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="built_in">this</span>.element.length-<span class="number">1</span>;j&gt;index;j--)&#123;</span><br><span class="line">        element[j] = element[j-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    element[index] = i;</span><br><span class="line">    <span class="built_in">this</span>.n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定下标的元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleate</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=index;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            element[i] = element[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.n--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找对应元素并返回对应下标</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> t)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (element[i]==t)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p><strong>特点：</strong>单链表<strong>不要求</strong>逻辑上相邻的两个元素在物理位置上也相邻，因此<strong>不需要</strong>连续的存储空间。<strong>查找某个特定的结点时，需要从表头开始遍历，依次查找</strong></p><p>链表设计习题(LeetCode707)：<a href="https://leetcode.cn/problems/design-linked-list/">https://leetcode.cn/problems/design-linked-list/</a></p><p>结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;<span class="comment">//存放数值</span></span><br><span class="line">    Node next;</span><br><span class="line">    Node()&#123;&#125;</span><br><span class="line">    Node(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    Node head;<span class="comment">//虚拟头结点</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=index;i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> cur.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加数据(重点)：</strong></p><p>需求—-</p><p>在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点</p><ul><li>头插法</li><li>尾插法</li><li>第n个结点前插入</li></ul><p><strong>头插法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line"> <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        node.next = head;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尾插法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atEnd</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> size;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next = node;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第n个结点插入法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atIndex</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">       <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">       <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">           atTail(val);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;<span class="built_in">this</span>.size)&#123;</span><br><span class="line">           atEnd(val);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">               cur = cur.next;</span><br><span class="line">           &#125;</span><br><span class="line">           node.next = cur.next;</span><br><span class="line">           cur.next = node;</span><br><span class="line">           size++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>删除数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">       <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="keyword">if</span> (n&lt;<span class="number">0</span>||n&gt;<span class="built_in">this</span>.size)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">               cur = cur.next;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       cur.next = cur.next.next;</span><br><span class="line">       <span class="built_in">this</span>.size--;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p> 逻辑结构上相邻的数据元素，存储在<em>指定的一块内存空间</em>中，数据元素只允许在这块内存空间中随机存放，这样的存储结构生成的链表称为<strong>静态链表</strong></p><p><strong>(静态链表是用<em>数组</em>来实现链式存储结构)</strong></p><p><strong>特点：</strong>删除和插入元素时间复杂度低(同链表)，不足点是需要提前分配一块较大的空间(同数组)</p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/29/hello-world/"/>
      <url>/2022/10/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
