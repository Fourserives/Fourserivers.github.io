<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>unity开发日记</title>
      <link href="/2023/05/22/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/05/22/unity%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity开发日记（一）"><a href="#Unity开发日记（一）" class="headerlink" title="Unity开发日记（一）"></a>Unity开发日记（一）</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="对导入素材进行调整"><a href="#对导入素材进行调整" class="headerlink" title="对导入素材进行调整"></a>对导入素材进行调整</h3><p><strong>背景素材调整</strong>：</p><p>导入素材之后调整素材大小</p><p>比较简单粗糙的调整素材大小方式(<strong>一般开发不采用</strong>)：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523124634722.png" alt="image-20230523124634722"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523124718451.png" alt="image-20230523124718451"></p><p>较为常用的方式(通过像素点来按比例进行调整)：</p><p><code>Pixels Per Unit</code>代表每个格子当中显示多少个像素单位，根据美术素材的不同(16 * 16,32 * 32等)进行调整</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523125453850.png" alt="image-20230523125453850"></p><p>同时还要进行调整的地方有：</p><p>一般像素游戏的渲染模式都会选择Point(即没有渲染)</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523125636015.png" alt="image-20230523125636015"></p><p>调整压缩</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523125727976.png" alt="image-20230523125727976"></p><p><strong>动作集(任务素材)调整</strong>：</p><p>如何查看总体动作素材集：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523130302228.png" alt="image-20230523130302228"></p><p>打开后的显示为：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523130343519.png" alt="image-20230523130343519"></p><p><strong>目的：</strong>对该图集进行切割，方便接下来开发流程中的使用</p><h4 id="切割图集"><a href="#切割图集" class="headerlink" title="切割图集"></a>切割图集</h4><p>首先调整图集：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523130642560.png" alt="image-20230523130642560"></p><p>下方的渲染和压缩同上进行修改即可</p><p><strong>开始进行素材的切割：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523131002998.png" alt="image-20230523131002998"></p><p>调整切割方式：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523131254369.png" alt="image-20230523131254369"></p><p>切割后效果：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523131422232.png" alt="image-20230523131422232"></p><p>PS：切割后要记得应用<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523131523178.png" alt="image-20230523131523178"></p><p>同时退出切割页面后，在编辑页面仍然要重新进行应用</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523131623907.png" alt="image-20230523131623907"></p><p>最终对图片集展开就可以使用每一个已经被切割出来的素材图片了</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230523131904995.png" alt="image-20230523131904995"></p><h4 id="场景绘制"><a href="#场景绘制" class="headerlink" title="场景绘制"></a>场景绘制</h4><p>对对应的场景素材先进行相应的调整：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524104502870.png" alt="image-20230524104502870"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524104534553.png" alt="image-20230524104534553"></p><p>渲染和压缩也要进行调整，同其他素材一样调整为<code>Point</code>和<code>None</code></p><p>随后开始<strong>对素材进行切割</strong>：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524104833360.png" alt="image-20230524104833360"></p><p>完成切割：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524105030018.png" alt="image-20230524105030018"></p><p><strong>对场景进行绘制</strong>：</p><p>使用2D场景绘制工具进行场景的绘制</p><h5 id="调色盘的使用"><a href="#调色盘的使用" class="headerlink" title="调色盘的使用"></a>调色盘的使用</h5><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524105200453.png" alt="image-20230524105200453"></p><p><strong>创建新的调色盘：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524105851206.png" alt="image-20230524105851206"></p><p>在Assets同级目录下创建方便管理的调色盘文件夹Titlemap，进入Titlemap文件夹再次创建方便管理每一个瓦块的文件夹Palettes，最后选择Palettes文件夹完成创建调色盘的工作</p><p>完成调色盘的创建：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524110454115.png" alt="image-20230524110454115"></p><p><strong>将切割后的场景素材拖拽到调色盘界面上</strong>：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524110959180.png" alt="image-20230524110959180"></p><p>拖拽后会显示让你添加到哪个文件夹上，这时在Palettes文件夹同级目录下再次创建一个Tiles文件夹，进入该文件夹再次创建一个Forest 1文件夹进行存放所有要进行调色的素材</p><p>完成素材的拖拽后：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524111034118.png" alt="image-20230524111034118"></p><p>接下来就是要对每一个瓦片进行调整：</p><p>在编辑器上先创建Tilemap</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524111432294.png" alt="image-20230524111432294"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524111443587.png" alt="image-20230524111443587"></p><p>这时我们的编辑器格子很明显</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524111500769.png" alt="image-20230524111500769"></p><p>然后<strong>回到调色盘编辑界面（Tile Palette）进行选择：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524111611550.png" alt="image-20230524111611550"></p><p>这时就可以选择我们想要的瓦片来进行绘制了</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524111855261.png" alt="image-20230524111855261"></p><p>绘制完成后查看在游戏中的效果：</p><p>如果要更改画面中视距的效果，可以通过<code>Free Aspect</code>调整</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524221329432.png" alt="image-20230524221329432"></p><p>最主要的调整方式还是通过相机来进行调整：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524221606143.png" alt="image-20230524221606143"></p><p>而在进行场景绘制的时候，如果场景挡住了人物，此时就可以用到<strong>叠层</strong></p><h4 id="叠层设置"><a href="#叠层设置" class="headerlink" title="叠层设置"></a>叠层设置</h4><p>通过对物体的<code>Sprite Renderer</code>组件内进行叠层设置</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524222135173.png" alt="image-20230524222135173"></p><p>其中<code>Sorting Layer</code>代表不同层，<code>Order in Layer</code>代表同层下不同次序</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524222343949.png" alt="image-20230524222343949"></p><p>为角色模型设置层次：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524222658163.png" alt="image-20230524222658163"></p><p>具体效果展示为：</p><p>当没有设置叠层时(即场景和人物的Layer都为Default)</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524222558642.png" alt="image-20230524222558642"></p><p>当为角色设置完层次之后</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524222749339.png" alt="image-20230524222749339"></p><p>同理，通过叠层设置背景效果：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524231329320.png" alt="image-20230524231329320"></p><p>通过<code>Tilemap Focus</code>小工具来选定Tilemap，从而让我们更清晰的知道我们当前编辑或要编辑的图层是哪一个</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230524233426441.png" alt="image-20230524233426441"></p><h4 id="规则瓦片和动态瓦片"><a href="#规则瓦片和动态瓦片" class="headerlink" title="规则瓦片和动态瓦片"></a>规则瓦片和动态瓦片</h4><h5 id="规则瓦片"><a href="#规则瓦片" class="headerlink" title="规则瓦片"></a>规则瓦片</h5><p>作用：能够高效率地绘制出相对完整的地图，通过自定义不同瓦片来实现</p><p>在瓦片文件夹(Tiles)下新建存放的规则瓦片文件夹(Rule Tiles)，在该文件夹下创建规则瓦片</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525173704349.png" alt="image-20230525173704349"></p><p>先对切割好的场景素材重新命名，方便接下来规则瓦片的使用</p><p>命名完成后开始进行规则瓦片的编辑：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525174651632.png" alt="image-20230525174651632"></p><p>选择瓦片，同时<strong>定义该瓦片在什么情况下出现</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525174853321.png" alt="image-20230525174853321"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525174914749.png" alt="image-20230525174914749"></p><p>部分瓦片（例如地面中间部分的瓦片）可以进行随机</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525175325376.png" alt="image-20230525175325376"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525175428601.png" alt="image-20230525175428601"></p><p>PS：<code>Noise</code>表示在随机的几个中的比重</p><p>添加完成</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525180209028.png" alt="image-20230525180209028"></p><p>接下来需要把我们自定义的规则瓦片添加到调色盘上，从而让我们可以直接拿去绘制</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525181619057.png" alt="image-20230525181619057"></p><p>绘制测试效果</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525181646432.png" alt="image-20230525181646432"></p><p>拐角处的瓦片过渡不自然，所以要再次修改规则瓦片，添加对应的转角处瓦片</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525182347284.png" alt="image-20230525182347284"></p><h5 id="动态瓦片"><a href="#动态瓦片" class="headerlink" title="动态瓦片"></a>动态瓦片</h5><p>作用：实现动态效果（比如瀑布）</p><p>原理：几个瓦片逐层逐帧进行切换，实现类似霓虹灯那样的视角效果，从而达到动态</p><p>在瓦片文件夹(Tiles)下新建存放的规则瓦片文件夹(Animated Tiles)，在该文件夹下创建规则瓦片</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525204525376.png" alt="image-20230525204525376"></p><p>同时为我们要用到的瓦片进行修改命名，随后开始添加到动态瓦片中</p><p>假设瀑布现在要搞成3(列)*4(行)的形式，此时就要分别在左中右各设置一个包含四张瀑布的动态瓦片</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525205217436.png" alt="image-20230525205217436"></p><p>保存后将该动态瓦片更新到调色盘上：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525205307920.png" alt="image-20230525205307920"></p><p>查看效果</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525205628906.png" alt="image-20230525205628906"></p><p>可以调节动态瓦片的速度：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525205815849.png" alt="image-20230525205815849"></p><p>按该步骤继续完成第二列第三列的瀑布编辑</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525210216674.png" alt="image-20230525210216674"></p><p>最终展示效果：<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230525210230655.png" alt="image-20230525210230655"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（四）</title>
      <link href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><strong>图的基本概念：</strong>在图形结构中，<strong>结点之间的关系可以是任意</strong>的，图中任意两个数据元素之间都可能相关</p><p>图的定义：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302092959390.png" alt="image-20230302092959390"></p><p>PS：线性表可以是空表，树可以是空树，但是<strong>图不可以是空图</strong>（图中不能一个顶点也没有）</p><h2 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><ul><li>无向图</li></ul><p><strong>无向图中的边没有方向</strong>，(vi,vj)表示连接顶点vi和vj之间的一条边，即(vi,vj)和(vj,vi)表示的是同一条边</p><p>树是连通的无回路的无向图，若一棵树有n个顶点，则必有n-1条边</p><ul><li>有向图</li></ul><p><strong>有向图中的边有方向</strong>，&lt;vi,vj&gt;表示从顶点vi到vj的一条有向边，vi是边的起点，vj是边的终点，即&lt;vi,vj&gt;和&lt;vj,vi&gt;表示的不是同一条边</p><p>有向图还可分为<strong>简单图</strong>和<strong>多重图</strong></p><p>多重图：指图中两个顶点之间有重复边</p><ul><li>完全图</li></ul><p>完全图是边数打到最大值的图。若有n个顶点，则完全无向图的边数为<code>n(n-1)/2</code>,完全有向图的边数为<code>n(n-1)</code></p><ul><li>带权图</li></ul><p>带权图指图中的边具有权值（权值有不同的含义）</p><ul><li>邻接顶点</li></ul><p>若(vi，vj)是无向图中的一条边，则vi和vj互为邻接顶点，边(vi，vj)依附于顶点vi和vj</p><p>若&lt;vi，vj&gt;是有向图中的一条边，则vi邻接到vj，vj邻接自vi，边&lt;vi，vj&gt;与vi和vj相关联</p><h3 id="顶点的度"><a href="#顶点的度" class="headerlink" title="顶点的度"></a>顶点的度</h3><p>顶点的度是指与顶点vi关联的<strong>边数</strong>，记作<code>degree(vi)</code></p><p>度为0的顶点称为孤立点，度为1的顶点称为悬挂点</p><p>在有向图中，以<strong>vi为终点的边数称为vi的入度</strong>，记作<code>indegree(vi)</code>；<strong>以vi为起点的边数称为vi的出度</strong>，记作<code>outdegree(vi)</code></p><p>PS：在有向图中，顶点的度 &#x3D; 该顶点的出度 + 该顶点的入度</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><ul><li>路径</li></ul><p>接续的边构成的顶点序列</p><ul><li>路径长度</li></ul><p>路径上边或弧的数目&#x2F;权值之和（不带权图算边数，带权图算权数和）</p><ul><li>回路</li></ul><p>第一个顶点和最后一个顶点相同的路径</p><ul><li>简单路径</li></ul><p>除路径起点和终点可以相同外，其余顶点均不相同</p><ul><li>简单回路(环)</li></ul><p>除路径起点和终点相同且长度大于1的简单路径</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302095321818.png" alt="image-20230302095321818"></p><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302095729492.png" alt="image-20230302095729492"></p><p>以下，(b)和(c)都是(a)的子图</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302095751667.png" alt="image-20230302095751667"></p><p>若G1≠G，称图G1是G的<strong>真子图</strong></p><p>若G1是G的子图，但V1&#x3D;V，称G1是G的<strong>生成子图</strong></p><h3 id="连通性、生成树"><a href="#连通性、生成树" class="headerlink" title="连通性、生成树"></a>连通性、生成树</h3><p>在图G中，若从顶点vi到vj有路径，则称vi和vj是连通的。</p><p>若每对顶点vi和vj都是连通的，则称G为<strong>连通图</strong>(强连通图)<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302100353660.png" alt="image-20230302100353660"></p><p>（无向图）<strong>非连通图</strong>的极大连通子图成为该图的<strong>连通分量</strong>；</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302100519090.png" alt="image-20230302100519090"></p><p>(有向图) <strong>非强连通图</strong>的极大连通子图成为该图的<strong>强连通分量</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302100650446.png" alt="image-20230302100650446"></p><p>连通无向图G的<strong>生成树</strong>是指G的一个<strong>极小连通生成子树</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302101202957.png" alt="image-20230302101202957"></p><p>各连通分量均为树的无向图称为森林</p><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><h3 id="邻接矩阵-数组表示"><a href="#邻接矩阵-数组表示" class="headerlink" title="邻接矩阵(数组表示)"></a>邻接矩阵(数组表示)</h3><p><strong>图的邻接矩阵(Adjacency Matrix) 存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息</strong></p><p>建立一个顶点表（记录各个顶点信息）和一个邻接矩阵（表示各个顶点之间的关系）</p><p><strong>无向图的邻接矩阵表示：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302102452796.png" alt="image-20230302102452796"></p><p><strong>特点：</strong></p><p>无向图的邻接矩阵是对称的</p><p>顶点i的度 &#x3D; 第i行(列)中1的个数</p><p><strong>有向图的邻接矩阵表示：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302102418265.png" alt="image-20230302102418265"></p><p>特点：</p><p>有向图的邻接矩阵可能是不对称的</p><p>顶点的出度 &#x3D; 第i行元素之和</p><p>顶点的入度 &#x3D; 第i列元素之和</p><p>顶点的度 &#x3D; 第i行元素之和+第i列元素之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="邻接表-链式"><a href="#邻接表-链式" class="headerlink" title="邻接表(链式)"></a>邻接表(链式)</h3><p>邻接表由两部分组成：<strong>表头结点表</strong>和<strong>边表</strong></p><p>邻接表中每个单链表的<strong>第一个结点</strong>存放有关<strong>顶点的信息</strong>，把这一结点看成链表的表头，<strong>其余结点存放有关边的信息</strong></p><p><strong>表头结点表：</strong>包括<strong>数据域</strong>和<strong>链域</strong>，数据域存储<strong>顶点的名称</strong>，链域用于指向链表中第一个结点（<strong>与顶点邻接的第一个顶点</strong>）</p><p><strong>边表：</strong>包括<strong>邻接点域</strong>（指示与顶点邻接的点在图中的位置，即<strong>数组下标</strong>）、(<strong>数据域</strong>（存储和边相关的信息，如<strong>权值</strong>）、)<strong>链域</strong>（指示<strong>与顶点邻接的下一条边的结点</strong>）</p><p>无向图的邻接表：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230302131743954.png" alt="image-20230302131743954"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（三）</title>
      <link href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="树的基本定义"><a href="#树的基本定义" class="headerlink" title="树的基本定义"></a>树的基本定义</h2><p>树是由n(n&gt;&#x3D;1)个有限结点组成一个具有层次关系的集合</p><p>树具有以下特点：</p><ul><li>每个结点有零个或多个子结点</li><li>没有父结点的结点为根结点</li><li>每一个非根结点只有一个父结点</li><li>每个结点及其后代结点整体上可以看做是一棵树，称为当前结点的父结点的一个子树</li></ul><h2 id="树的相关术语"><a href="#树的相关术语" class="headerlink" title="树的相关术语"></a>树的相关术语</h2><p><strong>结点的度：</strong></p><p>​一个结点含有的子树的个数称为该结点的度</p><p><strong>叶结点：</strong></p><p>​度为0的结点称为叶结点（也叫终端结点）</p><p><strong>分支结点：</strong></p><p>​度不为0的结点称为分支结点（也叫非终端结点）</p><p><strong>结点的层次：</strong></p><p>​从根结点开始，根结点的层次为1,根的直接后继层次为2，以此类推</p><p><strong>结点的层序编号：</strong></p><p>​将树中的结点，按照从上层到下层，同层从左到右的次序排成一个线性序列，把他们编成连续的自然数</p><p><strong>树的度：</strong></p><p>​树中所有结点的度的最大值</p><p><strong>树的高度：</strong></p><p>​树中结点的最大层次</p><p><strong>孩子结点：</strong></p><p>​一个结点的直接后继结点称为该结点的孩子结点</p><p><strong>双亲结点：</strong></p><p>​一个结点的直接前驱称为该结点的双亲结点</p><p><strong>兄弟结点：</strong></p><p>​同一双亲结点的孩子结点间互称为兄弟结点</p><p><strong>对某个节点</strong>:<br><strong>深度</strong>是指从根节点到该节点的最长简单路径边的条数；<br><strong>高度</strong>是指从<strong>最下面</strong>的叶子结点到该节点的最长简单路径边的条数；</p><p><strong>对二叉树：</strong><br><strong>深度</strong>是从根节点数到它的叶节点；<br><strong>高度</strong>是从叶节点数到它的根节点；<br><strong>注意： 树的深度和高度一样，但是具体到树的某个节点，其深度和高度不一样</strong></p><h2 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h2><ul><li>满二叉树</li><li>完全二叉树</li><li>二叉搜索树</li><li>平衡二叉搜索树</li></ul><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><p><strong>性质1：</strong>若根节点的层次为1，则二叉树第i层最多有<strong>2^i-1</strong>（i&gt;&#x3D;1）个结点</p><p><strong>性质2：</strong>在高度为h的二叉树中，最多有<strong>2^h-1</strong>个结点（h&gt;&#x3D;0）</p><p><strong>性质3：</strong>设一棵二叉树的叶子结点数为n0，2度结点数为n2，则<strong>n0 &#x3D; n2+1</strong></p><p><strong>性质4：</strong>一棵具有n个结点的完全二叉树，其高度h&#x3D;</p><p><strong>性质5：</strong>一棵具有n个结点的完全二叉树，对序号为i（0&lt;&#x3D;i&lt;&#x3D;n）的结点，有：</p><p>​1）若i&#x3D;0，则i为根结点；若i&gt;0，则i的父母结点序号为**[(i-1)&#x2F;2]**</p><p>​2）若2i+1&lt;n，则i的<strong>左孩子结点序号为2i+1</strong>；否则，i无左孩子</p><p>​3）若2i+2&gt;n，则i的<strong>右孩子结点序号为2i+2</strong>；否则，i无右孩子</p><h2 id="树的存储"><a href="#树的存储" class="headerlink" title="树的存储"></a>树的存储</h2><ul><li><p><strong>链式存储</strong></p></li><li><p><strong>线式存储(常用)</strong></p></li></ul><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><ul><li><strong>前序遍历</strong></li></ul><p>前序遍历先访问根结点，然后遍历左子树，最后遍历右子树<strong>(左中右)</strong></p><ul><li><strong>中序遍历</strong></li></ul><p>中序遍历是先遍历左子树，然后访问根结点，然后遍历右子树<strong>(中左右)</strong></p><ul><li><strong>后序遍历</strong></li></ul><p>后序遍历是先遍历左子树，然后遍历右子树，最后访问根节点<strong>(左右中)</strong></p><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><ul><li>层序遍历</li></ul><h2 id="构建二叉树"><a href="#构建二叉树" class="headerlink" title="构建二叉树"></a>构建二叉树</h2><p>例子：</p><p>以<strong>字符串</strong>方式构建二叉树</p><p>描述为：能够根据字符串<code>“A(B(,D),C)”</code>构造二叉树，构建后的树如图</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221112142020303.png" alt="image-20221112142020303"></p><p>解题思路参考：<a href="https://www.bilibili.com/video/BV1CK4y1G7b3">https://www.bilibili.com/video/BV1CK4y1G7b3</a></p><p>采用<strong>栈</strong>的方式来构建</p><p><strong>树结点：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">char</span> data; <span class="comment">//结点的值</span></span><br><span class="line">    TreeNode left;  <span class="comment">//左孩子</span></span><br><span class="line">    TreeNode right; <span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">char</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">char</span> data, TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构建树：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTree</span>&#123;</span><br><span class="line">    TreeNode root; <span class="comment">//根结点</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">()</span>&#123;<span class="built_in">this</span>.root = <span class="literal">null</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cut</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//用来标记左/右子树</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i)==<span class="string">&#x27;(&#x27;</span>)&#123; <span class="comment">//左括号说明此时结点有子树，同时将结点塞入栈中</span></span><br><span class="line">                st.push(node);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i)==<span class="string">&#x27;,&#x27;</span>)&#123;<span class="comment">//逗号说明接下来的结点是右子树</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str.charAt(i)==<span class="string">&#x27;)&#x27;</span>)&#123;<span class="comment">//右括号表示一个子树完成，此时要将子树的根节点弹出栈</span></span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(str.charAt(i));<span class="comment">//初始化赋值   </span></span><br><span class="line">                <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">                    root = node;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!st.isEmpty())&#123;</span><br><span class="line">                          <span class="keyword">if</span>(flag)&#123;<span class="comment">//为栈顶的结点连接对应的左孩子</span></span><br><span class="line">                    st.peek().left = node;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//为栈顶的结点连接对应的右孩子</span></span><br><span class="line">                    st.peek().right = node;</span><br><span class="line">                &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树中查找X值"><a href="#二叉树中查找X值" class="headerlink" title="二叉树中查找X值"></a>二叉树中查找X值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">findNode</span><span class="params">(TreeNode t,<span class="type">char</span> c)</span>&#123;</span><br><span class="line">    TreeNode p;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t.data==c)&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p = findNode(t.left,c);</span><br><span class="line">        <span class="keyword">if</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findNode(t.right,c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h2><p>定义结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>前序遍历方式（中左右）：</p><ul><li><strong>递归（常用）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preOrder</span>(TreeNode tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    System.out.printf(tree.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    preOrder(tree.left);</span><br><span class="line">    preOrder(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>栈</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder2</span><span class="params">(TreeNode tree)</span>&#123;</span><br><span class="line">       Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">       st.push(tree);</span><br><span class="line">       <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">t1</span> <span class="operator">=</span> st.peek();</span><br><span class="line">           st.pop();</span><br><span class="line">           System.out.println(t1.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (t1.right!=<span class="literal">null</span>)</span><br><span class="line">               st.push(t1.right);</span><br><span class="line">           <span class="keyword">if</span> (t1.left!=<span class="literal">null</span>)</span><br><span class="line">               st.push(t1.left);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>参考学习视频：<a href="https://www.bilibili.com/video/BV15f4y1W7i2">https://www.bilibili.com/video/BV15f4y1W7i2</a></p><h2 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preOrder</span>(TreeNode tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    preOrder(tree.left);</span><br><span class="line">    System.out.printf(tree.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    preOrder(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preOrder</span>(TreeNode tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    preOrder(tree.left);</span><br><span class="line">    preOrder(tree.right);</span><br><span class="line">    System.out.printf(tree.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（二）</title>
      <link href="/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><p>定义：是只允许在一端进行插入或删除的<strong>线性表</strong>。限定这种线性表只能在某一端进行插入和删除操作</p><p><strong>特点：后进先出</strong></p><h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><p>根据选用不同的存储结构来构建不同的栈</p><ul><li>顺序栈</li><li>链栈</li><li>共享栈</li></ul><h2 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><ul><li>InitStack：初始化一个空栈</li><li>StackEmpty:  判断一个栈是否为空</li><li>Push：进栈</li><li>Pop：出栈</li><li>GetTop：读取栈顶元素</li><li>DestoryStack：销毁栈，释放栈占用的存储空间</li></ul><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h1><p> 定义：队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的<strong>线性表</strong></p><p><strong>特点：先进先出</strong></p><h2 id="种类-1"><a href="#种类-1" class="headerlink" title="种类"></a>种类</h2><ul><li>顺序队列</li><li>循环队列</li><li>链队列</li><li>双端队列</li></ul><h2 id="队列的常用操作"><a href="#队列的常用操作" class="headerlink" title="队列的常用操作"></a>队列的常用操作</h2><ul><li>isEmpty：判断队列是否为空</li><li>add：入队</li><li>poll：出队</li><li>peek：返回队头元素</li></ul><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/11/07/first/"/>
      <url>/2022/11/07/first/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构(一)</title>
      <link href="/2022/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%80/"/>
      <url>/2022/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>定义：零个或多个数据元素的有限序列</p><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>线性表的存储结构分为：</p><ul><li>顺序存储</li><li>链式存储</li></ul><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><p>特点：逻辑上相邻的数据元素，其物理次序也是相邻的</p><p><strong>顺序表的构造与设计：</strong></p><p>SeqList<T>顺序表必有<strong>两个成员变量</strong>，一个数组存放数据，一个表示顺序表元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] element;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SeqList</span><span class="params">()</span>&#123;<span class="built_in">this</span>&#123;<span class="number">10</span>&#125;;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>增添数据</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> t)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element[n++] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置增添元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i，<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;<span class="built_in">this</span>.element.length-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//数组下标不合法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;不合法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="built_in">this</span>.element.length-<span class="number">1</span>;j&gt;index;j--)&#123;</span><br><span class="line">        element[j] = element[j-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    element[index] = i;</span><br><span class="line">    <span class="built_in">this</span>.n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定下标的元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleate</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=index;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            element[i] = element[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.n--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找对应元素并返回对应下标</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> t)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (element[i]==t)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p><strong>特点：</strong>单链表<strong>不要求</strong>逻辑上相邻的两个元素在物理位置上也相邻，因此<strong>不需要</strong>连续的存储空间。<strong>查找某个特定的结点时，需要从表头开始遍历，依次查找</strong></p><p>链表设计习题(LeetCode707)：<a href="https://leetcode.cn/problems/design-linked-list/">https://leetcode.cn/problems/design-linked-list/</a></p><p>结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;<span class="comment">//存放数值</span></span><br><span class="line">    Node next;</span><br><span class="line">    Node()&#123;&#125;</span><br><span class="line">    Node(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">    Node head;<span class="comment">//虚拟头结点</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=index;i++)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> cur.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加数据(重点)：</strong></p><p>需求—-</p><p>在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点</p><ul><li>头插法</li><li>尾插法</li><li>第n个结点前插入</li></ul><p><strong>头插法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atTail</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line"> <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        node.next = head;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尾插法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atEnd</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> size;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next = node;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第n个结点插入法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>删除数据：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p> 逻辑结构上相邻的数据元素，存储在<em>指定的一块内存空间</em>中，数据元素只允许在这块内存空间中随机存放，这样的存储结构生成的链表称为<strong>静态链表</strong></p><p><strong>(静态链表是用<em>数组</em>来实现链式存储结构)</strong></p><p><strong>特点：</strong>删除和插入元素时间复杂度低(同链表)，不足点是需要提前分配一块较大的空间(同数组)</p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/29/hello-world/"/>
      <url>/2022/10/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
